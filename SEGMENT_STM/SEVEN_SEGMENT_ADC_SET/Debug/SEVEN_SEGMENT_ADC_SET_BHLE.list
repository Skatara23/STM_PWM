
SEVEN_SEGMENT_ADC_SET_BHLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003298  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080033a4  080033a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800342c  0800342c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800342c  0800342c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800342c  0800342c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800342c  0800342c  0001342c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000070  080034a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080034a4  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000815e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000168d  00000000  00000000  000281f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  00029888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  00029fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166bf  00000000  00000000  0002a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008e7b  00000000  00000000  00040d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082b7f  00000000  00000000  00049bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002164  00000000  00000000  000cc79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800338c 	.word	0x0800338c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800338c 	.word	0x0800338c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_dmul>:
 800015c:	b570      	push	{r4, r5, r6, lr}
 800015e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000162:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000166:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016a:	bf1d      	ittte	ne
 800016c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000170:	ea94 0f0c 	teqne	r4, ip
 8000174:	ea95 0f0c 	teqne	r5, ip
 8000178:	f000 f8de 	bleq	8000338 <__aeabi_dmul+0x1dc>
 800017c:	442c      	add	r4, r5
 800017e:	ea81 0603 	eor.w	r6, r1, r3
 8000182:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000186:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800018e:	bf18      	it	ne
 8000190:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000194:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000198:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800019c:	d038      	beq.n	8000210 <__aeabi_dmul+0xb4>
 800019e:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a2:	f04f 0500 	mov.w	r5, #0
 80001a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b2:	f04f 0600 	mov.w	r6, #0
 80001b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ba:	f09c 0f00 	teq	ip, #0
 80001be:	bf18      	it	ne
 80001c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d0:	d204      	bcs.n	80001dc <__aeabi_dmul+0x80>
 80001d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001d6:	416d      	adcs	r5, r5
 80001d8:	eb46 0606 	adc.w	r6, r6, r6
 80001dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f4:	bf88      	it	hi
 80001f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fa:	d81e      	bhi.n	800023a <__aeabi_dmul+0xde>
 80001fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000200:	bf08      	it	eq
 8000202:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000206:	f150 0000 	adcs.w	r0, r0, #0
 800020a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800020e:	bd70      	pop	{r4, r5, r6, pc}
 8000210:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000214:	ea46 0101 	orr.w	r1, r6, r1
 8000218:	ea40 0002 	orr.w	r0, r0, r2
 800021c:	ea81 0103 	eor.w	r1, r1, r3
 8000220:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000224:	bfc2      	ittt	gt
 8000226:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800022e:	bd70      	popgt	{r4, r5, r6, pc}
 8000230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000234:	f04f 0e00 	mov.w	lr, #0
 8000238:	3c01      	subs	r4, #1
 800023a:	f300 80ab 	bgt.w	8000394 <__aeabi_dmul+0x238>
 800023e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000242:	bfde      	ittt	le
 8000244:	2000      	movle	r0, #0
 8000246:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024a:	bd70      	pople	{r4, r5, r6, pc}
 800024c:	f1c4 0400 	rsb	r4, r4, #0
 8000250:	3c20      	subs	r4, #32
 8000252:	da35      	bge.n	80002c0 <__aeabi_dmul+0x164>
 8000254:	340c      	adds	r4, #12
 8000256:	dc1b      	bgt.n	8000290 <__aeabi_dmul+0x134>
 8000258:	f104 0414 	add.w	r4, r4, #20
 800025c:	f1c4 0520 	rsb	r5, r4, #32
 8000260:	fa00 f305 	lsl.w	r3, r0, r5
 8000264:	fa20 f004 	lsr.w	r0, r0, r4
 8000268:	fa01 f205 	lsl.w	r2, r1, r5
 800026c:	ea40 0002 	orr.w	r0, r0, r2
 8000270:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000274:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000278:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800027c:	fa21 f604 	lsr.w	r6, r1, r4
 8000280:	eb42 0106 	adc.w	r1, r2, r6
 8000284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000288:	bf08      	it	eq
 800028a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800028e:	bd70      	pop	{r4, r5, r6, pc}
 8000290:	f1c4 040c 	rsb	r4, r4, #12
 8000294:	f1c4 0520 	rsb	r5, r4, #32
 8000298:	fa00 f304 	lsl.w	r3, r0, r4
 800029c:	fa20 f005 	lsr.w	r0, r0, r5
 80002a0:	fa01 f204 	lsl.w	r2, r1, r4
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002b8:	bf08      	it	eq
 80002ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002be:	bd70      	pop	{r4, r5, r6, pc}
 80002c0:	f1c4 0520 	rsb	r5, r4, #32
 80002c4:	fa00 f205 	lsl.w	r2, r0, r5
 80002c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002cc:	fa20 f304 	lsr.w	r3, r0, r4
 80002d0:	fa01 f205 	lsl.w	r2, r1, r5
 80002d4:	ea43 0302 	orr.w	r3, r3, r2
 80002d8:	fa21 f004 	lsr.w	r0, r1, r4
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	fa21 f204 	lsr.w	r2, r1, r4
 80002e4:	ea20 0002 	bic.w	r0, r0, r2
 80002e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f0:	bf08      	it	eq
 80002f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f6:	bd70      	pop	{r4, r5, r6, pc}
 80002f8:	f094 0f00 	teq	r4, #0
 80002fc:	d10f      	bne.n	800031e <__aeabi_dmul+0x1c2>
 80002fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000302:	0040      	lsls	r0, r0, #1
 8000304:	eb41 0101 	adc.w	r1, r1, r1
 8000308:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030c:	bf08      	it	eq
 800030e:	3c01      	subeq	r4, #1
 8000310:	d0f7      	beq.n	8000302 <__aeabi_dmul+0x1a6>
 8000312:	ea41 0106 	orr.w	r1, r1, r6
 8000316:	f095 0f00 	teq	r5, #0
 800031a:	bf18      	it	ne
 800031c:	4770      	bxne	lr
 800031e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	eb43 0303 	adc.w	r3, r3, r3
 8000328:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800032c:	bf08      	it	eq
 800032e:	3d01      	subeq	r5, #1
 8000330:	d0f7      	beq.n	8000322 <__aeabi_dmul+0x1c6>
 8000332:	ea43 0306 	orr.w	r3, r3, r6
 8000336:	4770      	bx	lr
 8000338:	ea94 0f0c 	teq	r4, ip
 800033c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000340:	bf18      	it	ne
 8000342:	ea95 0f0c 	teqne	r5, ip
 8000346:	d00c      	beq.n	8000362 <__aeabi_dmul+0x206>
 8000348:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800034c:	bf18      	it	ne
 800034e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000352:	d1d1      	bne.n	80002f8 <__aeabi_dmul+0x19c>
 8000354:	ea81 0103 	eor.w	r1, r1, r3
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	f04f 0000 	mov.w	r0, #0
 8000360:	bd70      	pop	{r4, r5, r6, pc}
 8000362:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000366:	bf06      	itte	eq
 8000368:	4610      	moveq	r0, r2
 800036a:	4619      	moveq	r1, r3
 800036c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000370:	d019      	beq.n	80003a6 <__aeabi_dmul+0x24a>
 8000372:	ea94 0f0c 	teq	r4, ip
 8000376:	d102      	bne.n	800037e <__aeabi_dmul+0x222>
 8000378:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800037c:	d113      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 800037e:	ea95 0f0c 	teq	r5, ip
 8000382:	d105      	bne.n	8000390 <__aeabi_dmul+0x234>
 8000384:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000388:	bf1c      	itt	ne
 800038a:	4610      	movne	r0, r2
 800038c:	4619      	movne	r1, r3
 800038e:	d10a      	bne.n	80003a6 <__aeabi_dmul+0x24a>
 8000390:	ea81 0103 	eor.w	r1, r1, r3
 8000394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000398:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd70      	pop	{r4, r5, r6, pc}
 80003a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003ae:	bd70      	pop	{r4, r5, r6, pc}

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	; 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_d2uiz>:
 8000728:	004a      	lsls	r2, r1, #1
 800072a:	d211      	bcs.n	8000750 <__aeabi_d2uiz+0x28>
 800072c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000730:	d211      	bcs.n	8000756 <__aeabi_d2uiz+0x2e>
 8000732:	d50d      	bpl.n	8000750 <__aeabi_d2uiz+0x28>
 8000734:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000738:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800073c:	d40e      	bmi.n	800075c <__aeabi_d2uiz+0x34>
 800073e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000746:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800074a:	fa23 f002 	lsr.w	r0, r3, r2
 800074e:	4770      	bx	lr
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	4770      	bx	lr
 8000756:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800075a:	d102      	bne.n	8000762 <__aeabi_d2uiz+0x3a>
 800075c:	f04f 30ff 	mov.w	r0, #4294967295
 8000760:	4770      	bx	lr
 8000762:	f04f 0000 	mov.w	r0, #0
 8000766:	4770      	bx	lr

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076e:	f000 faeb 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000772:	f000 f8ad 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit *
  /* USER CODE END SysInit */


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000776:	f000 f963 	bl	8000a40 <MX_GPIO_Init>
  MX_ADC1_Init();
 800077a:	f000 f8f9 	bl	8000970 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800077e:	f000 f935 	bl	80009ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_ADC_Start(&hadc1);
 8000782:	481c      	ldr	r0, [pc, #112]	; (80007f4 <main+0x8c>)
 8000784:	f000 fc3e 	bl	8001004 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,10000);
 8000788:	f242 7110 	movw	r1, #10000	; 0x2710
 800078c:	4819      	ldr	r0, [pc, #100]	; (80007f4 <main+0x8c>)
 800078e:	f000 fce7 	bl	8001160 <HAL_ADC_PollForConversion>
	  test=HAL_ADC_GetValue(&hadc1);
 8000792:	4818      	ldr	r0, [pc, #96]	; (80007f4 <main+0x8c>)
 8000794:	f000 fdea 	bl	800136c <HAL_ADC_GetValue>
 8000798:	4603      	mov	r3, r0
 800079a:	81fb      	strh	r3, [r7, #14]

	 test = test*0.001220703125; // conversion adc value into voltage
 800079c:	89fb      	ldrh	r3, [r7, #14]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff ff58 	bl	8000654 <__aeabi_i2d>
 80007a4:	f04f 0200 	mov.w	r2, #0
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <main+0x90>)
 80007aa:	f7ff fcd7 	bl	800015c <__aeabi_dmul>
 80007ae:	4602      	mov	r2, r0
 80007b0:	460b      	mov	r3, r1
 80007b2:	4610      	mov	r0, r2
 80007b4:	4619      	mov	r1, r3
 80007b6:	f7ff ffb7 	bl	8000728 <__aeabi_d2uiz>
 80007ba:	4603      	mov	r3, r0
 80007bc:	81fb      	strh	r3, [r7, #14]
	 // test = test /4096*5;
	 sprintf(msg,"%hu\r\n",test);
 80007be:	89fa      	ldrh	r2, [r7, #14]
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	490e      	ldr	r1, [pc, #56]	; (80007fc <main+0x94>)
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 f967 	bl	8002a98 <siprintf>

	 HAL_UART_Transmit(&huart1,(uint8_t *)msg,strlen(msg),100000);
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fcbd 	bl	800014c <strlen>
 80007d2:	4603      	mov	r3, r0
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	1d39      	adds	r1, r7, #4
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <main+0x98>)
 80007da:	480a      	ldr	r0, [pc, #40]	; (8000804 <main+0x9c>)
 80007dc:	f001 ffaa 	bl	8002734 <HAL_UART_Transmit>

	  displayNumber(test);
 80007e0:	89fb      	ldrh	r3, [r7, #14]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 f810 	bl	8000808 <displayNumber>
	  HAL_Delay(1000);
 80007e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007ec:	f000 fb0e 	bl	8000e0c <HAL_Delay>
  {
 80007f0:	e7c7      	b.n	8000782 <main+0x1a>
 80007f2:	bf00      	nop
 80007f4:	2000008c 	.word	0x2000008c
 80007f8:	3f540000 	.word	0x3f540000
 80007fc:	080033a4 	.word	0x080033a4
 8000800:	000186a0 	.word	0x000186a0
 8000804:	200000bc 	.word	0x200000bc

08000808 <displayNumber>:
  /* USER CODE END 3 */
}


// Function to display a number on the seven-segment display
void displayNumber(uint8_t number) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
    // Define the segment patterns for each digit (0-9)
    // Adjust these patterns based on the connections of your seven-segment display
    const uint8_t digitPatterns[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
 8000812:	4a2d      	ldr	r2, [pc, #180]	; (80008c8 <displayNumber+0xc0>)
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	ca07      	ldmia	r2, {r0, r1, r2}
 800081a:	c303      	stmia	r3!, {r0, r1}
 800081c:	801a      	strh	r2, [r3, #0]

    // Assuming the seven-segment display is common cathode
    // Use bitwise operations to select the appropriate segments for each digit
    uint8_t segments = digitPatterns[number];
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	3318      	adds	r3, #24
 8000822:	443b      	add	r3, r7
 8000824:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000828:	75fb      	strb	r3, [r7, #23]

    // Output the segment pattern to the GPIO pins
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, (segments & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800082a:	7dfb      	ldrb	r3, [r7, #23]
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	b2db      	uxtb	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	2101      	movs	r1, #1
 8000836:	4825      	ldr	r0, [pc, #148]	; (80008cc <displayNumber+0xc4>)
 8000838:	f001 f998 	bl	8001b6c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, (segments & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800083c:	7dfb      	ldrb	r3, [r7, #23]
 800083e:	105b      	asrs	r3, r3, #1
 8000840:	b2db      	uxtb	r3, r3
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	461a      	mov	r2, r3
 800084a:	2102      	movs	r1, #2
 800084c:	481f      	ldr	r0, [pc, #124]	; (80008cc <displayNumber+0xc4>)
 800084e:	f001 f98d 	bl	8001b6c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, (segments & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	109b      	asrs	r3, r3, #2
 8000856:	b2db      	uxtb	r3, r3
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	461a      	mov	r2, r3
 8000860:	2104      	movs	r1, #4
 8000862:	481a      	ldr	r0, [pc, #104]	; (80008cc <displayNumber+0xc4>)
 8000864:	f001 f982 	bl	8001b6c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, (segments & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	10db      	asrs	r3, r3, #3
 800086c:	b2db      	uxtb	r3, r3
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	461a      	mov	r2, r3
 8000876:	2108      	movs	r1, #8
 8000878:	4814      	ldr	r0, [pc, #80]	; (80008cc <displayNumber+0xc4>)
 800087a:	f001 f977 	bl	8001b6c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, (segments & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800087e:	7dfb      	ldrb	r3, [r7, #23]
 8000880:	111b      	asrs	r3, r3, #4
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	461a      	mov	r2, r3
 800088c:	2110      	movs	r1, #16
 800088e:	480f      	ldr	r0, [pc, #60]	; (80008cc <displayNumber+0xc4>)
 8000890:	f001 f96c 	bl	8001b6c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, (segments & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000894:	7dfb      	ldrb	r3, [r7, #23]
 8000896:	115b      	asrs	r3, r3, #5
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	461a      	mov	r2, r3
 80008a2:	2120      	movs	r1, #32
 80008a4:	4809      	ldr	r0, [pc, #36]	; (80008cc <displayNumber+0xc4>)
 80008a6:	f001 f961 	bl	8001b6c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, (segments & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008aa:	7dfb      	ldrb	r3, [r7, #23]
 80008ac:	119b      	asrs	r3, r3, #6
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	2140      	movs	r1, #64	; 0x40
 80008ba:	4804      	ldr	r0, [pc, #16]	; (80008cc <displayNumber+0xc4>)
 80008bc:	f001 f956 	bl	8001b6c <HAL_GPIO_WritePin>
}
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	080033ac 	.word	0x080033ac
 80008cc:	40010800 	.word	0x40010800

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008da:	2228      	movs	r2, #40	; 0x28
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 f8d2 	bl	8002a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000900:	2302      	movs	r3, #2
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000904:	2301      	movs	r3, #1
 8000906:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000908:	2310      	movs	r3, #16
 800090a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800090c:	2300      	movs	r3, #0
 800090e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000910:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000914:	4618      	mov	r0, r3
 8000916:	f001 f941 	bl	8001b9c <HAL_RCC_OscConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000920:	f000 f8d8 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000924:	230f      	movs	r3, #15
 8000926:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f001 fbae 	bl	80020a0 <HAL_RCC_ClockConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800094a:	f000 f8c3 	bl	8000ad4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800094e:	2302      	movs	r3, #2
 8000950:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fd2f 	bl	80023bc <HAL_RCCEx_PeriphCLKConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000964:	f000 f8b6 	bl	8000ad4 <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3750      	adds	r7, #80	; 0x50
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_ADC1_Init+0x74>)
 8000982:	4a19      	ldr	r2, [pc, #100]	; (80009e8 <MX_ADC1_Init+0x78>)
 8000984:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_ADC1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_ADC1_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_ADC1_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_ADC1_Init+0x74>)
 800099a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800099e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a0:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <MX_ADC1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_ADC1_Init+0x74>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <MX_ADC1_Init+0x74>)
 80009ae:	f000 fa51 	bl	8000e54 <HAL_ADC_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009b8:	f000 f88c 	bl	8000ad4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009bc:	2308      	movs	r3, #8
 80009be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_ADC1_Init+0x74>)
 80009ce:	f000 fcd9 	bl	8001384 <HAL_ADC_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80009d8:	f000 f87c 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000008c 	.word	0x2000008c
 80009e8:	40012400 	.word	0x40012400

080009ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 80009f2:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_USART1_UART_Init+0x50>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 80009f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART1_UART_Init+0x4c>)
 8000a24:	f001 fe36 	bl	8002694 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a2e:	f000 f851 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000bc 	.word	0x200000bc
 8000a3c:	40013800 	.word	0x40013800

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_GPIO_Init+0x8c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <MX_GPIO_Init+0x8c>)
 8000a5a:	f043 0320 	orr.w	r3, r3, #32
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_GPIO_Init+0x8c>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0320 	and.w	r3, r3, #32
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_GPIO_Init+0x8c>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a16      	ldr	r2, [pc, #88]	; (8000acc <MX_GPIO_Init+0x8c>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_GPIO_Init+0x8c>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_GPIO_Init+0x8c>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a10      	ldr	r2, [pc, #64]	; (8000acc <MX_GPIO_Init+0x8c>)
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_GPIO_Init+0x8c>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0308 	and.w	r3, r3, #8
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	21ff      	movs	r1, #255	; 0xff
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <MX_GPIO_Init+0x90>)
 8000aa2:	f001 f863 	bl	8001b6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000aa6:	23ff      	movs	r3, #255	; 0xff
 8000aa8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	f107 0310 	add.w	r3, r7, #16
 8000aba:	4619      	mov	r1, r3
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_GPIO_Init+0x90>)
 8000abe:	f000 fed9 	bl	8001874 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3720      	adds	r7, #32
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40010800 	.word	0x40010800

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	e7fe      	b.n	8000adc <Error_Handler+0x8>
	...

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_MspInit+0x40>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a0d      	ldr	r2, [pc, #52]	; (8000b20 <HAL_MspInit+0x40>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_MspInit+0x40>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_MspInit+0x40>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_MspInit+0x40>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_MspInit+0x40>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000

08000b24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <HAL_ADC_MspInit+0x6c>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d121      	bne.n	8000b88 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <HAL_ADC_MspInit+0x70>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a12      	ldr	r2, [pc, #72]	; (8000b94 <HAL_ADC_MspInit+0x70>)
 8000b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_ADC_MspInit+0x70>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <HAL_ADC_MspInit+0x70>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a0c      	ldr	r2, [pc, #48]	; (8000b94 <HAL_ADC_MspInit+0x70>)
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b0a      	ldr	r3, [pc, #40]	; (8000b94 <HAL_ADC_MspInit+0x70>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b74:	2301      	movs	r3, #1
 8000b76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_ADC_MspInit+0x74>)
 8000b84:	f000 fe76 	bl	8001874 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b88:	bf00      	nop
 8000b8a:	3720      	adds	r7, #32
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40012400 	.word	0x40012400
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40010c00 	.word	0x40010c00

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1c      	ldr	r2, [pc, #112]	; (8000c28 <HAL_UART_MspInit+0x8c>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d131      	bne.n	8000c20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bbc:	4b1b      	ldr	r3, [pc, #108]	; (8000c2c <HAL_UART_MspInit+0x90>)
 8000bbe:	699b      	ldr	r3, [r3, #24]
 8000bc0:	4a1a      	ldr	r2, [pc, #104]	; (8000c2c <HAL_UART_MspInit+0x90>)
 8000bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc6:	6193      	str	r3, [r2, #24]
 8000bc8:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <HAL_UART_MspInit+0x90>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <HAL_UART_MspInit+0x90>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <HAL_UART_MspInit+0x90>)
 8000bda:	f043 0304 	orr.w	r3, r3, #4
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_UART_MspInit+0x90>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0304 	and.w	r3, r3, #4
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480b      	ldr	r0, [pc, #44]	; (8000c30 <HAL_UART_MspInit+0x94>)
 8000c02:	f000 fe37 	bl	8001874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_UART_MspInit+0x94>)
 8000c1c:	f000 fe2a 	bl	8001874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40013800 	.word	0x40013800
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	40010800 	.word	0x40010800

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <NMI_Handler+0x4>

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr

08000c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7a:	f000 f8ab 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c8c:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <_sbrk+0x5c>)
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <_sbrk+0x60>)
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d102      	bne.n	8000ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <_sbrk+0x64>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <_sbrk+0x68>)
 8000ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d207      	bcs.n	8000cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb4:	f001 febe 	bl	8002a34 <__errno>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	220c      	movs	r2, #12
 8000cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc2:	e009      	b.n	8000cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	4a05      	ldr	r2, [pc, #20]	; (8000ce8 <_sbrk+0x64>)
 8000cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3718      	adds	r7, #24
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20002800 	.word	0x20002800
 8000ce4:	00000400 	.word	0x00000400
 8000ce8:	20000104 	.word	0x20000104
 8000cec:	20000120 	.word	0x20000120

08000cf0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr

08000cfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cfc:	f7ff fff8 	bl	8000cf0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d02:	490c      	ldr	r1, [pc, #48]	; (8000d34 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d04:	4a0c      	ldr	r2, [pc, #48]	; (8000d38 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d18:	4c09      	ldr	r4, [pc, #36]	; (8000d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d26:	f001 fe8b 	bl	8002a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d2a:	f7ff fd1d 	bl	8000768 <main>
  bx lr
 8000d2e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d38:	08003434 	.word	0x08003434
  ldr r2, =_sbss
 8000d3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d40:	2000011c 	.word	0x2000011c

08000d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC1_2_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <HAL_Init+0x28>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <HAL_Init+0x28>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d58:	2003      	movs	r0, #3
 8000d5a:	f000 fd57 	bl	800180c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5e:	200f      	movs	r0, #15
 8000d60:	f000 f808 	bl	8000d74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d64:	f7ff febc 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40022000 	.word	0x40022000

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fd61 	bl	800185a <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 fd37 	bl	8001822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_IncTick+0x1c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_IncTick+0x20>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a03      	ldr	r2, [pc, #12]	; (8000df4 <HAL_IncTick+0x20>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20000108 	.word	0x20000108

08000df8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <HAL_GetTick+0x10>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	20000108 	.word	0x20000108

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff fff0 	bl	8000df8 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffe0 	bl	8000df8 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008

08000e54 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d101      	bne.n	8000e76 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e0be      	b.n	8000ff4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d109      	bne.n	8000e98 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff fe46 	bl	8000b24 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 fbc5 	bl	8001628 <ADC_ConversionStop_Disable>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	f003 0310 	and.w	r3, r3, #16
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 8099 	bne.w	8000fe2 <HAL_ADC_Init+0x18e>
 8000eb0:	7dfb      	ldrb	r3, [r7, #23]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f040 8095 	bne.w	8000fe2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ec0:	f023 0302 	bic.w	r3, r3, #2
 8000ec4:	f043 0202 	orr.w	r2, r3, #2
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ed4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7b1b      	ldrb	r3, [r3, #12]
 8000eda:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000edc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000eec:	d003      	beq.n	8000ef6 <HAL_ADC_Init+0xa2>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d102      	bne.n	8000efc <HAL_ADC_Init+0xa8>
 8000ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efa:	e000      	b.n	8000efe <HAL_ADC_Init+0xaa>
 8000efc:	2300      	movs	r3, #0
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	7d1b      	ldrb	r3, [r3, #20]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d119      	bne.n	8000f40 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7b1b      	ldrb	r3, [r3, #12]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d109      	bne.n	8000f28 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	035a      	lsls	r2, r3, #13
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	e00b      	b.n	8000f40 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	f043 0220 	orr.w	r2, r3, #32
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	f043 0201 	orr.w	r2, r3, #1
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <HAL_ADC_Init+0x1a8>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	6812      	ldr	r2, [r2, #0]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	430b      	orrs	r3, r1
 8000f66:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f70:	d003      	beq.n	8000f7a <HAL_ADC_Init+0x126>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d104      	bne.n	8000f84 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	051b      	lsls	r3, r3, #20
 8000f82:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_ADC_Init+0x1ac>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d10b      	bne.n	8000fc0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	f023 0303 	bic.w	r3, r3, #3
 8000fb6:	f043 0201 	orr.w	r2, r3, #1
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fbe:	e018      	b.n	8000ff2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc4:	f023 0312 	bic.w	r3, r3, #18
 8000fc8:	f043 0210 	orr.w	r2, r3, #16
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	f043 0201 	orr.w	r2, r3, #1
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fe0:	e007      	b.n	8000ff2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe6:	f043 0210 	orr.w	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	ffe1f7fd 	.word	0xffe1f7fd
 8001000:	ff1f0efe 	.word	0xff1f0efe

08001004 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800100c:	2300      	movs	r3, #0
 800100e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001016:	2b01      	cmp	r3, #1
 8001018:	d101      	bne.n	800101e <HAL_ADC_Start+0x1a>
 800101a:	2302      	movs	r3, #2
 800101c:	e098      	b.n	8001150 <HAL_ADC_Start+0x14c>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 faa4 	bl	8001574 <ADC_Enable>
 800102c:	4603      	mov	r3, r0
 800102e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	2b00      	cmp	r3, #0
 8001034:	f040 8087 	bne.w	8001146 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001040:	f023 0301 	bic.w	r3, r3, #1
 8001044:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a41      	ldr	r2, [pc, #260]	; (8001158 <HAL_ADC_Start+0x154>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d105      	bne.n	8001062 <HAL_ADC_Start+0x5e>
 8001056:	4b41      	ldr	r3, [pc, #260]	; (800115c <HAL_ADC_Start+0x158>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d115      	bne.n	800108e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001066:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001078:	2b00      	cmp	r3, #0
 800107a:	d026      	beq.n	80010ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001084:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800108c:	e01d      	b.n	80010ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a2f      	ldr	r2, [pc, #188]	; (800115c <HAL_ADC_Start+0x158>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d004      	beq.n	80010ae <HAL_ADC_Start+0xaa>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a2b      	ldr	r2, [pc, #172]	; (8001158 <HAL_ADC_Start+0x154>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d10d      	bne.n	80010ca <HAL_ADC_Start+0xc6>
 80010ae:	4b2b      	ldr	r3, [pc, #172]	; (800115c <HAL_ADC_Start+0x158>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d007      	beq.n	80010ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d006      	beq.n	80010e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010da:	f023 0206 	bic.w	r2, r3, #6
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80010e2:	e002      	b.n	80010ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f06f 0202 	mvn.w	r2, #2
 80010fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001106:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800110a:	d113      	bne.n	8001134 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <HAL_ADC_Start+0x154>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d105      	bne.n	8001122 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001116:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_ADC_Start+0x158>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800111e:	2b00      	cmp	r3, #0
 8001120:	d108      	bne.n	8001134 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	e00c      	b.n	800114e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	e003      	b.n	800114e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40012800 	.word	0x40012800
 800115c:	40012400 	.word	0x40012400

08001160 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001172:	2300      	movs	r3, #0
 8001174:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001176:	f7ff fe3f 	bl	8000df8 <HAL_GetTick>
 800117a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00b      	beq.n	80011a2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118e:	f043 0220 	orr.w	r2, r3, #32
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e0d3      	b.n	800134a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d131      	bne.n	8001214 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d12a      	bne.n	8001214 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80011be:	e021      	b.n	8001204 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c6:	d01d      	beq.n	8001204 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d007      	beq.n	80011de <HAL_ADC_PollForConversion+0x7e>
 80011ce:	f7ff fe13 	bl	8000df8 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d212      	bcs.n	8001204 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0302 	and.w	r3, r3, #2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10b      	bne.n	8001204 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f0:	f043 0204 	orr.w	r2, r3, #4
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e0a2      	b.n	800134a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0d6      	beq.n	80011c0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001212:	e070      	b.n	80012f6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001214:	4b4f      	ldr	r3, [pc, #316]	; (8001354 <HAL_ADC_PollForConversion+0x1f4>)
 8001216:	681c      	ldr	r4, [r3, #0]
 8001218:	2002      	movs	r0, #2
 800121a:	f001 f985 	bl	8002528 <HAL_RCCEx_GetPeriphCLKFreq>
 800121e:	4603      	mov	r3, r0
 8001220:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6919      	ldr	r1, [r3, #16]
 800122a:	4b4b      	ldr	r3, [pc, #300]	; (8001358 <HAL_ADC_PollForConversion+0x1f8>)
 800122c:	400b      	ands	r3, r1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d118      	bne.n	8001264 <HAL_ADC_PollForConversion+0x104>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68d9      	ldr	r1, [r3, #12]
 8001238:	4b48      	ldr	r3, [pc, #288]	; (800135c <HAL_ADC_PollForConversion+0x1fc>)
 800123a:	400b      	ands	r3, r1
 800123c:	2b00      	cmp	r3, #0
 800123e:	d111      	bne.n	8001264 <HAL_ADC_PollForConversion+0x104>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6919      	ldr	r1, [r3, #16]
 8001246:	4b46      	ldr	r3, [pc, #280]	; (8001360 <HAL_ADC_PollForConversion+0x200>)
 8001248:	400b      	ands	r3, r1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d108      	bne.n	8001260 <HAL_ADC_PollForConversion+0x100>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68d9      	ldr	r1, [r3, #12]
 8001254:	4b43      	ldr	r3, [pc, #268]	; (8001364 <HAL_ADC_PollForConversion+0x204>)
 8001256:	400b      	ands	r3, r1
 8001258:	2b00      	cmp	r3, #0
 800125a:	d101      	bne.n	8001260 <HAL_ADC_PollForConversion+0x100>
 800125c:	2314      	movs	r3, #20
 800125e:	e020      	b.n	80012a2 <HAL_ADC_PollForConversion+0x142>
 8001260:	2329      	movs	r3, #41	; 0x29
 8001262:	e01e      	b.n	80012a2 <HAL_ADC_PollForConversion+0x142>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6919      	ldr	r1, [r3, #16]
 800126a:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_ADC_PollForConversion+0x200>)
 800126c:	400b      	ands	r3, r1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d106      	bne.n	8001280 <HAL_ADC_PollForConversion+0x120>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68d9      	ldr	r1, [r3, #12]
 8001278:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <HAL_ADC_PollForConversion+0x204>)
 800127a:	400b      	ands	r3, r1
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00d      	beq.n	800129c <HAL_ADC_PollForConversion+0x13c>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6919      	ldr	r1, [r3, #16]
 8001286:	4b38      	ldr	r3, [pc, #224]	; (8001368 <HAL_ADC_PollForConversion+0x208>)
 8001288:	400b      	ands	r3, r1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d108      	bne.n	80012a0 <HAL_ADC_PollForConversion+0x140>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68d9      	ldr	r1, [r3, #12]
 8001294:	4b34      	ldr	r3, [pc, #208]	; (8001368 <HAL_ADC_PollForConversion+0x208>)
 8001296:	400b      	ands	r3, r1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <HAL_ADC_PollForConversion+0x140>
 800129c:	2354      	movs	r3, #84	; 0x54
 800129e:	e000      	b.n	80012a2 <HAL_ADC_PollForConversion+0x142>
 80012a0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012a8:	e021      	b.n	80012ee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d01a      	beq.n	80012e8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d007      	beq.n	80012c8 <HAL_ADC_PollForConversion+0x168>
 80012b8:	f7ff fd9e 	bl	8000df8 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d20f      	bcs.n	80012e8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d90b      	bls.n	80012e8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	f043 0204 	orr.w	r2, r3, #4
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e030      	b.n	800134a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3301      	adds	r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d8d9      	bhi.n	80012aa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f06f 0212 	mvn.w	r2, #18
 80012fe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001304:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001316:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800131a:	d115      	bne.n	8001348 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001320:	2b00      	cmp	r3, #0
 8001322:	d111      	bne.n	8001348 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d105      	bne.n	8001348 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001340:	f043 0201 	orr.w	r2, r3, #1
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	20000000 	.word	0x20000000
 8001358:	24924924 	.word	0x24924924
 800135c:	00924924 	.word	0x00924924
 8001360:	12492492 	.word	0x12492492
 8001364:	00492492 	.word	0x00492492
 8001368:	00249249 	.word	0x00249249

0800136c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800139c:	2b01      	cmp	r3, #1
 800139e:	d101      	bne.n	80013a4 <HAL_ADC_ConfigChannel+0x20>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e0dc      	b.n	800155e <HAL_ADC_ConfigChannel+0x1da>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b06      	cmp	r3, #6
 80013b2:	d81c      	bhi.n	80013ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	3b05      	subs	r3, #5
 80013c6:	221f      	movs	r2, #31
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	43db      	mvns	r3, r3
 80013ce:	4019      	ands	r1, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	3b05      	subs	r3, #5
 80013e0:	fa00 f203 	lsl.w	r2, r0, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	635a      	str	r2, [r3, #52]	; 0x34
 80013ec:	e03c      	b.n	8001468 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	d81c      	bhi.n	8001430 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	3b23      	subs	r3, #35	; 0x23
 8001408:	221f      	movs	r2, #31
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	4019      	ands	r1, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b23      	subs	r3, #35	; 0x23
 8001422:	fa00 f203 	lsl.w	r2, r0, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
 800142e:	e01b      	b.n	8001468 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	3b41      	subs	r3, #65	; 0x41
 8001442:	221f      	movs	r2, #31
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	4019      	ands	r1, r3
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	4613      	mov	r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	3b41      	subs	r3, #65	; 0x41
 800145c:	fa00 f203 	lsl.w	r2, r0, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b09      	cmp	r3, #9
 800146e:	d91c      	bls.n	80014aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68d9      	ldr	r1, [r3, #12]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	3b1e      	subs	r3, #30
 8001482:	2207      	movs	r2, #7
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	4019      	ands	r1, r3
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	6898      	ldr	r0, [r3, #8]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	3b1e      	subs	r3, #30
 800149c:	fa00 f203 	lsl.w	r2, r0, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	430a      	orrs	r2, r1
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	e019      	b.n	80014de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6919      	ldr	r1, [r3, #16]
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4613      	mov	r3, r2
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4413      	add	r3, r2
 80014ba:	2207      	movs	r2, #7
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	4019      	ands	r1, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	6898      	ldr	r0, [r3, #8]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	fa00 f203 	lsl.w	r2, r0, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d003      	beq.n	80014ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014ea:	2b11      	cmp	r3, #17
 80014ec:	d132      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <HAL_ADC_ConfigChannel+0x1e4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d125      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d126      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001514:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b10      	cmp	r3, #16
 800151c:	d11a      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_ADC_ConfigChannel+0x1e8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a13      	ldr	r2, [pc, #76]	; (8001570 <HAL_ADC_ConfigChannel+0x1ec>)
 8001524:	fba2 2303 	umull	r2, r3, r2, r3
 8001528:	0c9a      	lsrs	r2, r3, #18
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001534:	e002      	b.n	800153c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	3b01      	subs	r3, #1
 800153a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f9      	bne.n	8001536 <HAL_ADC_ConfigChannel+0x1b2>
 8001542:	e007      	b.n	8001554 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001548:	f043 0220 	orr.w	r2, r3, #32
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40012400 	.word	0x40012400
 800156c:	20000000 	.word	0x20000000
 8001570:	431bde83 	.word	0x431bde83

08001574 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b01      	cmp	r3, #1
 8001590:	d040      	beq.n	8001614 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f042 0201 	orr.w	r2, r2, #1
 80015a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015a2:	4b1f      	ldr	r3, [pc, #124]	; (8001620 <ADC_Enable+0xac>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <ADC_Enable+0xb0>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	0c9b      	lsrs	r3, r3, #18
 80015ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015b0:	e002      	b.n	80015b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	3b01      	subs	r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f9      	bne.n	80015b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015be:	f7ff fc1b 	bl	8000df8 <HAL_GetTick>
 80015c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015c4:	e01f      	b.n	8001606 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015c6:	f7ff fc17 	bl	8000df8 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d918      	bls.n	8001606 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d011      	beq.n	8001606 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	f043 0210 	orr.w	r2, r3, #16
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	f043 0201 	orr.w	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e007      	b.n	8001616 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b01      	cmp	r3, #1
 8001612:	d1d8      	bne.n	80015c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000000 	.word	0x20000000
 8001624:	431bde83 	.word	0x431bde83

08001628 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b01      	cmp	r3, #1
 8001640:	d12e      	bne.n	80016a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0201 	bic.w	r2, r2, #1
 8001650:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001652:	f7ff fbd1 	bl	8000df8 <HAL_GetTick>
 8001656:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001658:	e01b      	b.n	8001692 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800165a:	f7ff fbcd 	bl	8000df8 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d914      	bls.n	8001692 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10d      	bne.n	8001692 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	f043 0210 	orr.w	r2, r3, #16
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	f043 0201 	orr.w	r2, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e007      	b.n	80016a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b01      	cmp	r3, #1
 800169e:	d0dc      	beq.n	800165a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	6039      	str	r1, [r7, #0]
 800171a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	db0a      	blt.n	800173a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	b2da      	uxtb	r2, r3
 8001728:	490c      	ldr	r1, [pc, #48]	; (800175c <__NVIC_SetPriority+0x4c>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	0112      	lsls	r2, r2, #4
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	440b      	add	r3, r1
 8001734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001738:	e00a      	b.n	8001750 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	b2da      	uxtb	r2, r3
 800173e:	4908      	ldr	r1, [pc, #32]	; (8001760 <__NVIC_SetPriority+0x50>)
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	3b04      	subs	r3, #4
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	440b      	add	r3, r1
 800174e:	761a      	strb	r2, [r3, #24]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f1c3 0307 	rsb	r3, r3, #7
 800177e:	2b04      	cmp	r3, #4
 8001780:	bf28      	it	cs
 8001782:	2304      	movcs	r3, #4
 8001784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3304      	adds	r3, #4
 800178a:	2b06      	cmp	r3, #6
 800178c:	d902      	bls.n	8001794 <NVIC_EncodePriority+0x30>
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3b03      	subs	r3, #3
 8001792:	e000      	b.n	8001796 <NVIC_EncodePriority+0x32>
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43da      	mvns	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	401a      	ands	r2, r3
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ac:	f04f 31ff 	mov.w	r1, #4294967295
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa01 f303 	lsl.w	r3, r1, r3
 80017b6:	43d9      	mvns	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	4313      	orrs	r3, r2
         );
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3724      	adds	r7, #36	; 0x24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d8:	d301      	bcc.n	80017de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017da:	2301      	movs	r3, #1
 80017dc:	e00f      	b.n	80017fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <SysTick_Config+0x40>)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e6:	210f      	movs	r1, #15
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f7ff ff90 	bl	8001710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <SysTick_Config+0x40>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f6:	4b04      	ldr	r3, [pc, #16]	; (8001808 <SysTick_Config+0x40>)
 80017f8:	2207      	movs	r2, #7
 80017fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	e000e010 	.word	0xe000e010

0800180c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff49 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	4603      	mov	r3, r0
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
 800182e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001834:	f7ff ff5e 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	6978      	ldr	r0, [r7, #20]
 8001840:	f7ff ff90 	bl	8001764 <NVIC_EncodePriority>
 8001844:	4602      	mov	r2, r0
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	4611      	mov	r1, r2
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff5f 	bl	8001710 <__NVIC_SetPriority>
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f7ff ffb0 	bl	80017c8 <SysTick_Config>
 8001868:	4603      	mov	r3, r0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b08b      	sub	sp, #44	; 0x2c
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001886:	e161      	b.n	8001b4c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001888:	2201      	movs	r2, #1
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	f040 8150 	bne.w	8001b46 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4a97      	ldr	r2, [pc, #604]	; (8001b08 <HAL_GPIO_Init+0x294>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d05e      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018b0:	4a95      	ldr	r2, [pc, #596]	; (8001b08 <HAL_GPIO_Init+0x294>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d875      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018b6:	4a95      	ldr	r2, [pc, #596]	; (8001b0c <HAL_GPIO_Init+0x298>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d058      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018bc:	4a93      	ldr	r2, [pc, #588]	; (8001b0c <HAL_GPIO_Init+0x298>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d86f      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018c2:	4a93      	ldr	r2, [pc, #588]	; (8001b10 <HAL_GPIO_Init+0x29c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d052      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018c8:	4a91      	ldr	r2, [pc, #580]	; (8001b10 <HAL_GPIO_Init+0x29c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d869      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018ce:	4a91      	ldr	r2, [pc, #580]	; (8001b14 <HAL_GPIO_Init+0x2a0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d04c      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018d4:	4a8f      	ldr	r2, [pc, #572]	; (8001b14 <HAL_GPIO_Init+0x2a0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d863      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018da:	4a8f      	ldr	r2, [pc, #572]	; (8001b18 <HAL_GPIO_Init+0x2a4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d046      	beq.n	800196e <HAL_GPIO_Init+0xfa>
 80018e0:	4a8d      	ldr	r2, [pc, #564]	; (8001b18 <HAL_GPIO_Init+0x2a4>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d85d      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d82a      	bhi.n	8001940 <HAL_GPIO_Init+0xcc>
 80018ea:	2b12      	cmp	r3, #18
 80018ec:	d859      	bhi.n	80019a2 <HAL_GPIO_Init+0x12e>
 80018ee:	a201      	add	r2, pc, #4	; (adr r2, 80018f4 <HAL_GPIO_Init+0x80>)
 80018f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f4:	0800196f 	.word	0x0800196f
 80018f8:	08001949 	.word	0x08001949
 80018fc:	0800195b 	.word	0x0800195b
 8001900:	0800199d 	.word	0x0800199d
 8001904:	080019a3 	.word	0x080019a3
 8001908:	080019a3 	.word	0x080019a3
 800190c:	080019a3 	.word	0x080019a3
 8001910:	080019a3 	.word	0x080019a3
 8001914:	080019a3 	.word	0x080019a3
 8001918:	080019a3 	.word	0x080019a3
 800191c:	080019a3 	.word	0x080019a3
 8001920:	080019a3 	.word	0x080019a3
 8001924:	080019a3 	.word	0x080019a3
 8001928:	080019a3 	.word	0x080019a3
 800192c:	080019a3 	.word	0x080019a3
 8001930:	080019a3 	.word	0x080019a3
 8001934:	080019a3 	.word	0x080019a3
 8001938:	08001951 	.word	0x08001951
 800193c:	08001965 	.word	0x08001965
 8001940:	4a76      	ldr	r2, [pc, #472]	; (8001b1c <HAL_GPIO_Init+0x2a8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001946:	e02c      	b.n	80019a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	623b      	str	r3, [r7, #32]
          break;
 800194e:	e029      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	3304      	adds	r3, #4
 8001956:	623b      	str	r3, [r7, #32]
          break;
 8001958:	e024      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	3308      	adds	r3, #8
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e01f      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	330c      	adds	r3, #12
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e01a      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001976:	2304      	movs	r3, #4
 8001978:	623b      	str	r3, [r7, #32]
          break;
 800197a:	e013      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d105      	bne.n	8001990 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001984:	2308      	movs	r3, #8
 8001986:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69fa      	ldr	r2, [r7, #28]
 800198c:	611a      	str	r2, [r3, #16]
          break;
 800198e:	e009      	b.n	80019a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	615a      	str	r2, [r3, #20]
          break;
 800199a:	e003      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
          break;
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x130>
          break;
 80019a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	2bff      	cmp	r3, #255	; 0xff
 80019a8:	d801      	bhi.n	80019ae <HAL_GPIO_Init+0x13a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	e001      	b.n	80019b2 <HAL_GPIO_Init+0x13e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3304      	adds	r3, #4
 80019b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2bff      	cmp	r3, #255	; 0xff
 80019b8:	d802      	bhi.n	80019c0 <HAL_GPIO_Init+0x14c>
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_Init+0x152>
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	3b08      	subs	r3, #8
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	210f      	movs	r1, #15
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	401a      	ands	r2, r3
 80019d8:	6a39      	ldr	r1, [r7, #32]
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	431a      	orrs	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80a9 	beq.w	8001b46 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019f4:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_GPIO_Init+0x2ac>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a49      	ldr	r2, [pc, #292]	; (8001b20 <HAL_GPIO_Init+0x2ac>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b47      	ldr	r3, [pc, #284]	; (8001b20 <HAL_GPIO_Init+0x2ac>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	60bb      	str	r3, [r7, #8]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a0c:	4a45      	ldr	r2, [pc, #276]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a10:	089b      	lsrs	r3, r3, #2
 8001a12:	3302      	adds	r3, #2
 8001a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a3d      	ldr	r2, [pc, #244]	; (8001b28 <HAL_GPIO_Init+0x2b4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d00d      	beq.n	8001a54 <HAL_GPIO_Init+0x1e0>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a3c      	ldr	r2, [pc, #240]	; (8001b2c <HAL_GPIO_Init+0x2b8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d007      	beq.n	8001a50 <HAL_GPIO_Init+0x1dc>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a3b      	ldr	r2, [pc, #236]	; (8001b30 <HAL_GPIO_Init+0x2bc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d101      	bne.n	8001a4c <HAL_GPIO_Init+0x1d8>
 8001a48:	2302      	movs	r3, #2
 8001a4a:	e004      	b.n	8001a56 <HAL_GPIO_Init+0x1e2>
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e002      	b.n	8001a56 <HAL_GPIO_Init+0x1e2>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_GPIO_Init+0x1e2>
 8001a54:	2300      	movs	r3, #0
 8001a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a58:	f002 0203 	and.w	r2, r2, #3
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	4093      	lsls	r3, r2
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a66:	492f      	ldr	r1, [pc, #188]	; (8001b24 <HAL_GPIO_Init+0x2b0>)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a80:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	492b      	ldr	r1, [pc, #172]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a8e:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4927      	ldr	r1, [pc, #156]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001aa8:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	4921      	ldr	r1, [pc, #132]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	60cb      	str	r3, [r1, #12]
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ab6:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	491d      	ldr	r1, [pc, #116]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4917      	ldr	r1, [pc, #92]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4913      	ldr	r1, [pc, #76]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d01f      	beq.n	8001b38 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	490d      	ldr	r1, [pc, #52]	; (8001b34 <HAL_GPIO_Init+0x2c0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
 8001b04:	e01f      	b.n	8001b46 <HAL_GPIO_Init+0x2d2>
 8001b06:	bf00      	nop
 8001b08:	10320000 	.word	0x10320000
 8001b0c:	10310000 	.word	0x10310000
 8001b10:	10220000 	.word	0x10220000
 8001b14:	10210000 	.word	0x10210000
 8001b18:	10120000 	.word	0x10120000
 8001b1c:	10110000 	.word	0x10110000
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40010000 	.word	0x40010000
 8001b28:	40010800 	.word	0x40010800
 8001b2c:	40010c00 	.word	0x40010c00
 8001b30:	40011000 	.word	0x40011000
 8001b34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <HAL_GPIO_Init+0x2f4>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	4909      	ldr	r1, [pc, #36]	; (8001b68 <HAL_GPIO_Init+0x2f4>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	3301      	adds	r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f47f ae96 	bne.w	8001888 <HAL_GPIO_Init+0x14>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	372c      	adds	r7, #44	; 0x2c
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40010400 	.word	0x40010400

08001b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	807b      	strh	r3, [r7, #2]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b7c:	787b      	ldrb	r3, [r7, #1]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b82:	887a      	ldrh	r2, [r7, #2]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b88:	e003      	b.n	8001b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b8a:	887b      	ldrh	r3, [r7, #2]
 8001b8c:	041a      	lsls	r2, r3, #16
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e272      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8087 	beq.w	8001cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bbc:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d00c      	beq.n	8001be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc8:	4b8f      	ldr	r3, [pc, #572]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d112      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
 8001bd4:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be0:	d10b      	bne.n	8001bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d06c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d168      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e24c      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x76>
 8001c04:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a7f      	ldr	r2, [pc, #508]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	e02e      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x98>
 8001c1a:	4b7b      	ldr	r3, [pc, #492]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7a      	ldr	r2, [pc, #488]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c24:	6013      	str	r3, [r2, #0]
 8001c26:	4b78      	ldr	r3, [pc, #480]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a77      	ldr	r2, [pc, #476]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	e01d      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0xbc>
 8001c3e:	4b72      	ldr	r3, [pc, #456]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a71      	ldr	r2, [pc, #452]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6e      	ldr	r2, [pc, #440]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0xd4>
 8001c58:	4b6b      	ldr	r3, [pc, #428]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a6a      	ldr	r2, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a67      	ldr	r2, [pc, #412]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d013      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c78:	f7ff f8be 	bl	8000df8 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7ff f8ba 	bl	8000df8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e200      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0xe4>
 8001c9e:	e014      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f8aa 	bl	8000df8 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f8a6 	bl	8000df8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1ec      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x10c>
 8001cc6:	e000      	b.n	8001cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d063      	beq.n	8001d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ce2:	4b49      	ldr	r3, [pc, #292]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d11c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
 8001cee:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d116      	bne.n	8001d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cfa:	4b43      	ldr	r3, [pc, #268]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e1c0      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d12:	4b3d      	ldr	r3, [pc, #244]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4939      	ldr	r1, [pc, #228]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	e03a      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d020      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7ff f85f 	bl	8000df8 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff f85b 	bl	8000df8 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1a1      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5c:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4927      	ldr	r1, [pc, #156]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	e015      	b.n	8001d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <HAL_RCC_OscConfig+0x270>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff f83e 	bl	8000df8 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d80:	f7ff f83a 	bl	8000df8 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e180      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d92:	4b1d      	ldr	r3, [pc, #116]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d03a      	beq.n	8001e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d019      	beq.n	8001de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db8:	f7ff f81e 	bl	8000df8 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f81a 	bl	8000df8 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e160      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd2:	4b0d      	ldr	r3, [pc, #52]	; (8001e08 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dde:	2001      	movs	r0, #1
 8001de0:	f000 face 	bl	8002380 <RCC_Delay>
 8001de4:	e01c      	b.n	8001e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_RCC_OscConfig+0x274>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dec:	f7ff f804 	bl	8000df8 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df2:	e00f      	b.n	8001e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff f800 	bl	8000df8 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d908      	bls.n	8001e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e146      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	42420000 	.word	0x42420000
 8001e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e14:	4b92      	ldr	r3, [pc, #584]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e9      	bne.n	8001df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a6 	beq.w	8001f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e32:	4b8b      	ldr	r3, [pc, #556]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	4b88      	ldr	r3, [pc, #544]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	4a87      	ldr	r2, [pc, #540]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	61d3      	str	r3, [r2, #28]
 8001e4a:	4b85      	ldr	r3, [pc, #532]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e56:	2301      	movs	r3, #1
 8001e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e5a:	4b82      	ldr	r3, [pc, #520]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d118      	bne.n	8001e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e66:	4b7f      	ldr	r3, [pc, #508]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a7e      	ldr	r2, [pc, #504]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e72:	f7fe ffc1 	bl	8000df8 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7a:	f7fe ffbd 	bl	8000df8 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b64      	cmp	r3, #100	; 0x64
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e103      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	4b75      	ldr	r3, [pc, #468]	; (8002064 <HAL_RCC_OscConfig+0x4c8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d106      	bne.n	8001eae <HAL_RCC_OscConfig+0x312>
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a6e      	ldr	r2, [pc, #440]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	e02d      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x334>
 8001eb6:	4b6a      	ldr	r3, [pc, #424]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
 8001eba:	4a69      	ldr	r2, [pc, #420]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	f023 0301 	bic.w	r3, r3, #1
 8001ec0:	6213      	str	r3, [r2, #32]
 8001ec2:	4b67      	ldr	r3, [pc, #412]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	4a66      	ldr	r2, [pc, #408]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	f023 0304 	bic.w	r3, r3, #4
 8001ecc:	6213      	str	r3, [r2, #32]
 8001ece:	e01c      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d10c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x356>
 8001ed8:	4b61      	ldr	r3, [pc, #388]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4a60      	ldr	r2, [pc, #384]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6213      	str	r3, [r2, #32]
 8001ee4:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	4a5d      	ldr	r2, [pc, #372]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6213      	str	r3, [r2, #32]
 8001ef0:	e00b      	b.n	8001f0a <HAL_RCC_OscConfig+0x36e>
 8001ef2:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a5a      	ldr	r2, [pc, #360]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	4b58      	ldr	r3, [pc, #352]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a57      	ldr	r2, [pc, #348]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d015      	beq.n	8001f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7fe ff71 	bl	8000df8 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1a:	f7fe ff6d 	bl	8000df8 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0b1      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ee      	beq.n	8001f1a <HAL_RCC_OscConfig+0x37e>
 8001f3c:	e014      	b.n	8001f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7fe ff5b 	bl	8000df8 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7fe ff57 	bl	8000df8 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e09b      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	4b40      	ldr	r3, [pc, #256]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ee      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d105      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a3b      	ldr	r2, [pc, #236]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 8087 	beq.w	8002092 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 030c 	and.w	r3, r3, #12
 8001f8c:	2b08      	cmp	r3, #8
 8001f8e:	d061      	beq.n	8002054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d146      	bne.n	8002026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f98:	4b33      	ldr	r3, [pc, #204]	; (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7fe ff2b 	bl	8000df8 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7fe ff27 	bl	8000df8 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e06d      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb8:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	4921      	ldr	r1, [pc, #132]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe0:	4b1f      	ldr	r3, [pc, #124]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a19      	ldr	r1, [r3, #32]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	491b      	ldr	r1, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fefb 	bl	8000df8 <HAL_GetTick>
 8002002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002006:	f7fe fef7 	bl	8000df8 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e03d      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x46a>
 8002024:	e035      	b.n	8002092 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_RCC_OscConfig+0x4cc>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7fe fee4 	bl	8000df8 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7fe fee0 	bl	8000df8 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e026      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCC_OscConfig+0x4c4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x498>
 8002052:	e01e      	b.n	8002092 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d107      	bne.n	800206c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e019      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
 8002060:	40021000 	.word	0x40021000
 8002064:	40007000 	.word	0x40007000
 8002068:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_OscConfig+0x500>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	429a      	cmp	r2, r3
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0d0      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d910      	bls.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b67      	ldr	r3, [pc, #412]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 0207 	bic.w	r2, r3, #7
 80020ca:	4965      	ldr	r1, [pc, #404]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b63      	ldr	r3, [pc, #396]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0b8      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4b59      	ldr	r3, [pc, #356]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a58      	ldr	r2, [pc, #352]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002106:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002114:	4b53      	ldr	r3, [pc, #332]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a52      	ldr	r2, [pc, #328]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800211e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	4b50      	ldr	r3, [pc, #320]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	494d      	ldr	r1, [pc, #308]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d040      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b47      	ldr	r3, [pc, #284]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d115      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e07f      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800215e:	4b41      	ldr	r3, [pc, #260]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e073      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	4b3d      	ldr	r3, [pc, #244]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e06b      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217e:	4b39      	ldr	r3, [pc, #228]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	4936      	ldr	r1, [pc, #216]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002190:	f7fe fe32 	bl	8000df8 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002196:	e00a      	b.n	80021ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002198:	f7fe fe2e 	bl	8000df8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e053      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b2d      	ldr	r3, [pc, #180]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f003 020c 	and.w	r2, r3, #12
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1eb      	bne.n	8002198 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b27      	ldr	r3, [pc, #156]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d210      	bcs.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	4922      	ldr	r1, [pc, #136]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	4313      	orrs	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b20      	ldr	r3, [pc, #128]	; (8002260 <HAL_RCC_ClockConfig+0x1c0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e032      	b.n	8002256 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b19      	ldr	r3, [pc, #100]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4916      	ldr	r1, [pc, #88]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	490e      	ldr	r1, [pc, #56]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	4313      	orrs	r3, r2
 800222c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800222e:	f000 f821 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002232:	4602      	mov	r2, r0
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <HAL_RCC_ClockConfig+0x1c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	490a      	ldr	r1, [pc, #40]	; (8002268 <HAL_RCC_ClockConfig+0x1c8>)
 8002240:	5ccb      	ldrb	r3, [r1, r3]
 8002242:	fa22 f303 	lsr.w	r3, r2, r3
 8002246:	4a09      	ldr	r2, [pc, #36]	; (800226c <HAL_RCC_ClockConfig+0x1cc>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x1d0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe fd90 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40022000 	.word	0x40022000
 8002264:	40021000 	.word	0x40021000
 8002268:	080033b8 	.word	0x080033b8
 800226c:	20000000 	.word	0x20000000
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800228e:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	2b04      	cmp	r3, #4
 800229c:	d002      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x30>
 800229e:	2b08      	cmp	r3, #8
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x36>
 80022a2:	e027      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022a6:	613b      	str	r3, [r7, #16]
      break;
 80022a8:	e027      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	4a17      	ldr	r2, [pc, #92]	; (8002310 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022b4:	5cd3      	ldrb	r3, [r2, r3]
 80022b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d010      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	0c5b      	lsrs	r3, r3, #17
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ce:	5cd3      	ldrb	r3, [r2, r3]
 80022d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022d6:	fb03 f202 	mul.w	r2, r3, r2
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e004      	b.n	80022ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0c      	ldr	r2, [pc, #48]	; (8002318 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	613b      	str	r3, [r7, #16]
      break;
 80022f2:	e002      	b.n	80022fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_GetSysClockFreq+0x98>)
 80022f6:	613b      	str	r3, [r7, #16]
      break;
 80022f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022fa:	693b      	ldr	r3, [r7, #16]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	371c      	adds	r7, #28
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40021000 	.word	0x40021000
 800230c:	007a1200 	.word	0x007a1200
 8002310:	080033d0 	.word	0x080033d0
 8002314:	080033e0 	.word	0x080033e0
 8002318:	003d0900 	.word	0x003d0900

0800231c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002320:	4b02      	ldr	r3, [pc, #8]	; (800232c <HAL_RCC_GetHCLKFreq+0x10>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr
 800232c:	20000000 	.word	0x20000000

08002330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002334:	f7ff fff2 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4903      	ldr	r1, [pc, #12]	; (8002354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	080033c8 	.word	0x080033c8

08002358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800235c:	f7ff ffde 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	0adb      	lsrs	r3, r3, #11
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	4903      	ldr	r1, [pc, #12]	; (800237c <HAL_RCC_GetPCLK2Freq+0x24>)
 800236e:	5ccb      	ldrb	r3, [r1, r3]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	080033c8 	.word	0x080033c8

08002380 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002388:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <RCC_Delay+0x34>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <RCC_Delay+0x38>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	0a5b      	lsrs	r3, r3, #9
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800239c:	bf00      	nop
  }
  while (Delay --);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1e5a      	subs	r2, r3, #1
 80023a2:	60fa      	str	r2, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f9      	bne.n	800239c <RCC_Delay+0x1c>
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	20000000 	.word	0x20000000
 80023b8:	10624dd3 	.word	0x10624dd3

080023bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d07d      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80023d8:	2300      	movs	r3, #0
 80023da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023dc:	4b4f      	ldr	r3, [pc, #316]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023de:	69db      	ldr	r3, [r3, #28]
 80023e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10d      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e8:	4b4c      	ldr	r3, [pc, #304]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	4a4b      	ldr	r2, [pc, #300]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f2:	61d3      	str	r3, [r2, #28]
 80023f4:	4b49      	ldr	r3, [pc, #292]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002400:	2301      	movs	r3, #1
 8002402:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002404:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d118      	bne.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002410:	4b43      	ldr	r3, [pc, #268]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a42      	ldr	r2, [pc, #264]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241c:	f7fe fcec 	bl	8000df8 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002422:	e008      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002424:	f7fe fce8 	bl	8000df8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e06d      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002442:	4b36      	ldr	r3, [pc, #216]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d02e      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	429a      	cmp	r2, r3
 800245e:	d027      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002460:	4b2e      	ldr	r3, [pc, #184]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002468:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b2c      	ldr	r3, [pc, #176]	; (8002524 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002476:	4a29      	ldr	r2, [pc, #164]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d014      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002486:	f7fe fcb7 	bl	8000df8 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800248c:	e00a      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7fe fcb3 	bl	8000df8 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f241 3288 	movw	r2, #5000	; 0x1388
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e036      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0ee      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4917      	ldr	r1, [pc, #92]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d105      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	4a13      	ldr	r2, [pc, #76]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024e0:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	490b      	ldr	r1, [pc, #44]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	4904      	ldr	r1, [pc, #16]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40021000 	.word	0x40021000
 8002520:	40007000 	.word	0x40007000
 8002524:	42420440 	.word	0x42420440

08002528 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	2300      	movs	r3, #0
 8002542:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b10      	cmp	r3, #16
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b10      	cmp	r3, #16
 800254e:	f200 808a 	bhi.w	8002666 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d045      	beq.n	80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d075      	beq.n	800264a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800255e:	e082      	b.n	8002666 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002560:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002566:	4b45      	ldr	r3, [pc, #276]	; (800267c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d07b      	beq.n	800266a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	0c9b      	lsrs	r3, r3, #18
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	4a41      	ldr	r2, [pc, #260]	; (8002680 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800257c:	5cd3      	ldrb	r3, [r2, r3]
 800257e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d015      	beq.n	80025b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800258a:	4b3c      	ldr	r3, [pc, #240]	; (800267c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	0c5b      	lsrs	r3, r3, #17
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	4a3b      	ldr	r2, [pc, #236]	; (8002684 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002596:	5cd3      	ldrb	r3, [r2, r3]
 8002598:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00d      	beq.n	80025c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80025a4:	4a38      	ldr	r2, [pc, #224]	; (8002688 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	fb02 f303 	mul.w	r3, r2, r3
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	e004      	b.n	80025c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4a34      	ldr	r2, [pc, #208]	; (800268c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80025ba:	fb02 f303 	mul.w	r3, r2, r3
 80025be:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80025c0:	4b2e      	ldr	r3, [pc, #184]	; (800267c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025cc:	d102      	bne.n	80025d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	61bb      	str	r3, [r7, #24]
      break;
 80025d2:	e04a      	b.n	800266a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4a2d      	ldr	r2, [pc, #180]	; (8002690 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	085b      	lsrs	r3, r3, #1
 80025e0:	61bb      	str	r3, [r7, #24]
      break;
 80025e2:	e042      	b.n	800266a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f4:	d108      	bne.n	8002608 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	e01f      	b.n	8002648 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800260e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002612:	d109      	bne.n	8002628 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002620:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	e00f      	b.n	8002648 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002632:	d11c      	bne.n	800266e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d016      	beq.n	800266e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002640:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002644:	61bb      	str	r3, [r7, #24]
      break;
 8002646:	e012      	b.n	800266e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002648:	e011      	b.n	800266e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800264a:	f7ff fe85 	bl	8002358 <HAL_RCC_GetPCLK2Freq>
 800264e:	4602      	mov	r2, r0
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	0b9b      	lsrs	r3, r3, #14
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	3301      	adds	r3, #1
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	61bb      	str	r3, [r7, #24]
      break;
 8002664:	e004      	b.n	8002670 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002666:	bf00      	nop
 8002668:	e002      	b.n	8002670 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800266a:	bf00      	nop
 800266c:	e000      	b.n	8002670 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800266e:	bf00      	nop
    }
  }
  return (frequency);
 8002670:	69bb      	ldr	r3, [r7, #24]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	080033e4 	.word	0x080033e4
 8002684:	080033f4 	.word	0x080033f4
 8002688:	007a1200 	.word	0x007a1200
 800268c:	003d0900 	.word	0x003d0900
 8002690:	aaaaaaab 	.word	0xaaaaaaab

08002694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e042      	b.n	800272c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe fa6e 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2224      	movs	r2, #36	; 0x24
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f91d 	bl	8002918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800270c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2220      	movs	r2, #32
 8002720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08a      	sub	sp, #40	; 0x28
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	4613      	mov	r3, r2
 8002742:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b20      	cmp	r3, #32
 8002752:	d16d      	bne.n	8002830 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_UART_Transmit+0x2c>
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e066      	b.n	8002832 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2221      	movs	r2, #33	; 0x21
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002772:	f7fe fb41 	bl	8000df8 <HAL_GetTick>
 8002776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	88fa      	ldrh	r2, [r7, #6]
 800277c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	88fa      	ldrh	r2, [r7, #6]
 8002782:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278c:	d108      	bne.n	80027a0 <HAL_UART_Transmit+0x6c>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d104      	bne.n	80027a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	e003      	b.n	80027a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027a8:	e02a      	b.n	8002800 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2200      	movs	r2, #0
 80027b2:	2180      	movs	r1, #128	; 0x80
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f840 	bl	800283a <UART_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e036      	b.n	8002832 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10b      	bne.n	80027e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	461a      	mov	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	3302      	adds	r3, #2
 80027de:	61bb      	str	r3, [r7, #24]
 80027e0:	e007      	b.n	80027f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	781a      	ldrb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	3301      	adds	r3, #1
 80027f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1cf      	bne.n	80027aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2200      	movs	r2, #0
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f810 	bl	800283a <UART_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e006      	b.n	8002832 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	e000      	b.n	8002832 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002830:	2302      	movs	r3, #2
  }
}
 8002832:	4618      	mov	r0, r3
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b090      	sub	sp, #64	; 0x40
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	4613      	mov	r3, r2
 8002848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800284a:	e050      	b.n	80028ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002852:	d04c      	beq.n	80028ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <UART_WaitOnFlagUntilTimeout+0x30>
 800285a:	f7fe facd 	bl	8000df8 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002866:	429a      	cmp	r2, r3
 8002868:	d241      	bcs.n	80028ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	330c      	adds	r3, #12
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	e853 3f00 	ldrex	r3, [r3]
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002880:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	330c      	adds	r3, #12
 8002888:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800288a:	637a      	str	r2, [r7, #52]	; 0x34
 800288c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002890:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002892:	e841 2300 	strex	r3, r2, [r1]
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1e5      	bne.n	800286a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3314      	adds	r3, #20
 80028a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	e853 3f00 	ldrex	r3, [r3]
 80028ac:	613b      	str	r3, [r7, #16]
   return(result);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3314      	adds	r3, #20
 80028bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028be:	623a      	str	r2, [r7, #32]
 80028c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c2:	69f9      	ldr	r1, [r7, #28]
 80028c4:	6a3a      	ldr	r2, [r7, #32]
 80028c6:	e841 2300 	strex	r3, r2, [r1]
 80028ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1e5      	bne.n	800289e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e00f      	b.n	800290e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4013      	ands	r3, r2
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	bf0c      	ite	eq
 80028fe:	2301      	moveq	r3, #1
 8002900:	2300      	movne	r3, #0
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	429a      	cmp	r2, r3
 800290a:	d09f      	beq.n	800284c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3740      	adds	r7, #64	; 0x40
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002952:	f023 030c 	bic.w	r3, r3, #12
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6812      	ldr	r2, [r2, #0]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	430b      	orrs	r3, r1
 800295e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a2c      	ldr	r2, [pc, #176]	; (8002a2c <UART_SetConfig+0x114>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d103      	bne.n	8002988 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002980:	f7ff fcea 	bl	8002358 <HAL_RCC_GetPCLK2Freq>
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	e002      	b.n	800298e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002988:	f7ff fcd2 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 800298c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	009a      	lsls	r2, r3, #2
 8002998:	441a      	add	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	4a22      	ldr	r2, [pc, #136]	; (8002a30 <UART_SetConfig+0x118>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	0119      	lsls	r1, r3, #4
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	009a      	lsls	r2, r3, #2
 80029b8:	441a      	add	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80029c4:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <UART_SetConfig+0x118>)
 80029c6:	fba3 0302 	umull	r0, r3, r3, r2
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2064      	movs	r0, #100	; 0x64
 80029ce:	fb00 f303 	mul.w	r3, r0, r3
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	3332      	adds	r3, #50	; 0x32
 80029d8:	4a15      	ldr	r2, [pc, #84]	; (8002a30 <UART_SetConfig+0x118>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e4:	4419      	add	r1, r3
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	009a      	lsls	r2, r3, #2
 80029f0:	441a      	add	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <UART_SetConfig+0x118>)
 80029fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002a02:	095b      	lsrs	r3, r3, #5
 8002a04:	2064      	movs	r0, #100	; 0x64
 8002a06:	fb00 f303 	mul.w	r3, r0, r3
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	3332      	adds	r3, #50	; 0x32
 8002a10:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <UART_SetConfig+0x118>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	f003 020f 	and.w	r2, r3, #15
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	440a      	add	r2, r1
 8002a22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40013800 	.word	0x40013800
 8002a30:	51eb851f 	.word	0x51eb851f

08002a34 <__errno>:
 8002a34:	4b01      	ldr	r3, [pc, #4]	; (8002a3c <__errno+0x8>)
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	2000000c 	.word	0x2000000c

08002a40 <__libc_init_array>:
 8002a40:	b570      	push	{r4, r5, r6, lr}
 8002a42:	2600      	movs	r6, #0
 8002a44:	4d0c      	ldr	r5, [pc, #48]	; (8002a78 <__libc_init_array+0x38>)
 8002a46:	4c0d      	ldr	r4, [pc, #52]	; (8002a7c <__libc_init_array+0x3c>)
 8002a48:	1b64      	subs	r4, r4, r5
 8002a4a:	10a4      	asrs	r4, r4, #2
 8002a4c:	42a6      	cmp	r6, r4
 8002a4e:	d109      	bne.n	8002a64 <__libc_init_array+0x24>
 8002a50:	f000 fc9c 	bl	800338c <_init>
 8002a54:	2600      	movs	r6, #0
 8002a56:	4d0a      	ldr	r5, [pc, #40]	; (8002a80 <__libc_init_array+0x40>)
 8002a58:	4c0a      	ldr	r4, [pc, #40]	; (8002a84 <__libc_init_array+0x44>)
 8002a5a:	1b64      	subs	r4, r4, r5
 8002a5c:	10a4      	asrs	r4, r4, #2
 8002a5e:	42a6      	cmp	r6, r4
 8002a60:	d105      	bne.n	8002a6e <__libc_init_array+0x2e>
 8002a62:	bd70      	pop	{r4, r5, r6, pc}
 8002a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a68:	4798      	blx	r3
 8002a6a:	3601      	adds	r6, #1
 8002a6c:	e7ee      	b.n	8002a4c <__libc_init_array+0xc>
 8002a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a72:	4798      	blx	r3
 8002a74:	3601      	adds	r6, #1
 8002a76:	e7f2      	b.n	8002a5e <__libc_init_array+0x1e>
 8002a78:	0800342c 	.word	0x0800342c
 8002a7c:	0800342c 	.word	0x0800342c
 8002a80:	0800342c 	.word	0x0800342c
 8002a84:	08003430 	.word	0x08003430

08002a88 <memset>:
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4402      	add	r2, r0
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d100      	bne.n	8002a92 <memset+0xa>
 8002a90:	4770      	bx	lr
 8002a92:	f803 1b01 	strb.w	r1, [r3], #1
 8002a96:	e7f9      	b.n	8002a8c <memset+0x4>

08002a98 <siprintf>:
 8002a98:	b40e      	push	{r1, r2, r3}
 8002a9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a9e:	b500      	push	{lr}
 8002aa0:	b09c      	sub	sp, #112	; 0x70
 8002aa2:	ab1d      	add	r3, sp, #116	; 0x74
 8002aa4:	9002      	str	r0, [sp, #8]
 8002aa6:	9006      	str	r0, [sp, #24]
 8002aa8:	9107      	str	r1, [sp, #28]
 8002aaa:	9104      	str	r1, [sp, #16]
 8002aac:	4808      	ldr	r0, [pc, #32]	; (8002ad0 <siprintf+0x38>)
 8002aae:	4909      	ldr	r1, [pc, #36]	; (8002ad4 <siprintf+0x3c>)
 8002ab0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ab4:	9105      	str	r1, [sp, #20]
 8002ab6:	6800      	ldr	r0, [r0, #0]
 8002ab8:	a902      	add	r1, sp, #8
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	f000 f868 	bl	8002b90 <_svfiprintf_r>
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	9b02      	ldr	r3, [sp, #8]
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	b01c      	add	sp, #112	; 0x70
 8002ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002acc:	b003      	add	sp, #12
 8002ace:	4770      	bx	lr
 8002ad0:	2000000c 	.word	0x2000000c
 8002ad4:	ffff0208 	.word	0xffff0208

08002ad8 <__ssputs_r>:
 8002ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002adc:	688e      	ldr	r6, [r1, #8]
 8002ade:	4682      	mov	sl, r0
 8002ae0:	429e      	cmp	r6, r3
 8002ae2:	460c      	mov	r4, r1
 8002ae4:	4690      	mov	r8, r2
 8002ae6:	461f      	mov	r7, r3
 8002ae8:	d838      	bhi.n	8002b5c <__ssputs_r+0x84>
 8002aea:	898a      	ldrh	r2, [r1, #12]
 8002aec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002af0:	d032      	beq.n	8002b58 <__ssputs_r+0x80>
 8002af2:	6825      	ldr	r5, [r4, #0]
 8002af4:	6909      	ldr	r1, [r1, #16]
 8002af6:	3301      	adds	r3, #1
 8002af8:	eba5 0901 	sub.w	r9, r5, r1
 8002afc:	6965      	ldr	r5, [r4, #20]
 8002afe:	444b      	add	r3, r9
 8002b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b08:	106d      	asrs	r5, r5, #1
 8002b0a:	429d      	cmp	r5, r3
 8002b0c:	bf38      	it	cc
 8002b0e:	461d      	movcc	r5, r3
 8002b10:	0553      	lsls	r3, r2, #21
 8002b12:	d531      	bpl.n	8002b78 <__ssputs_r+0xa0>
 8002b14:	4629      	mov	r1, r5
 8002b16:	f000 fb6f 	bl	80031f8 <_malloc_r>
 8002b1a:	4606      	mov	r6, r0
 8002b1c:	b950      	cbnz	r0, 8002b34 <__ssputs_r+0x5c>
 8002b1e:	230c      	movs	r3, #12
 8002b20:	f04f 30ff 	mov.w	r0, #4294967295
 8002b24:	f8ca 3000 	str.w	r3, [sl]
 8002b28:	89a3      	ldrh	r3, [r4, #12]
 8002b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b2e:	81a3      	strh	r3, [r4, #12]
 8002b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b34:	464a      	mov	r2, r9
 8002b36:	6921      	ldr	r1, [r4, #16]
 8002b38:	f000 face 	bl	80030d8 <memcpy>
 8002b3c:	89a3      	ldrh	r3, [r4, #12]
 8002b3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b46:	81a3      	strh	r3, [r4, #12]
 8002b48:	6126      	str	r6, [r4, #16]
 8002b4a:	444e      	add	r6, r9
 8002b4c:	6026      	str	r6, [r4, #0]
 8002b4e:	463e      	mov	r6, r7
 8002b50:	6165      	str	r5, [r4, #20]
 8002b52:	eba5 0509 	sub.w	r5, r5, r9
 8002b56:	60a5      	str	r5, [r4, #8]
 8002b58:	42be      	cmp	r6, r7
 8002b5a:	d900      	bls.n	8002b5e <__ssputs_r+0x86>
 8002b5c:	463e      	mov	r6, r7
 8002b5e:	4632      	mov	r2, r6
 8002b60:	4641      	mov	r1, r8
 8002b62:	6820      	ldr	r0, [r4, #0]
 8002b64:	f000 fac6 	bl	80030f4 <memmove>
 8002b68:	68a3      	ldr	r3, [r4, #8]
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	1b9b      	subs	r3, r3, r6
 8002b6e:	60a3      	str	r3, [r4, #8]
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	4433      	add	r3, r6
 8002b74:	6023      	str	r3, [r4, #0]
 8002b76:	e7db      	b.n	8002b30 <__ssputs_r+0x58>
 8002b78:	462a      	mov	r2, r5
 8002b7a:	f000 fbb1 	bl	80032e0 <_realloc_r>
 8002b7e:	4606      	mov	r6, r0
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d1e1      	bne.n	8002b48 <__ssputs_r+0x70>
 8002b84:	4650      	mov	r0, sl
 8002b86:	6921      	ldr	r1, [r4, #16]
 8002b88:	f000 face 	bl	8003128 <_free_r>
 8002b8c:	e7c7      	b.n	8002b1e <__ssputs_r+0x46>
	...

08002b90 <_svfiprintf_r>:
 8002b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b94:	4698      	mov	r8, r3
 8002b96:	898b      	ldrh	r3, [r1, #12]
 8002b98:	4607      	mov	r7, r0
 8002b9a:	061b      	lsls	r3, r3, #24
 8002b9c:	460d      	mov	r5, r1
 8002b9e:	4614      	mov	r4, r2
 8002ba0:	b09d      	sub	sp, #116	; 0x74
 8002ba2:	d50e      	bpl.n	8002bc2 <_svfiprintf_r+0x32>
 8002ba4:	690b      	ldr	r3, [r1, #16]
 8002ba6:	b963      	cbnz	r3, 8002bc2 <_svfiprintf_r+0x32>
 8002ba8:	2140      	movs	r1, #64	; 0x40
 8002baa:	f000 fb25 	bl	80031f8 <_malloc_r>
 8002bae:	6028      	str	r0, [r5, #0]
 8002bb0:	6128      	str	r0, [r5, #16]
 8002bb2:	b920      	cbnz	r0, 8002bbe <_svfiprintf_r+0x2e>
 8002bb4:	230c      	movs	r3, #12
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	e0d1      	b.n	8002d62 <_svfiprintf_r+0x1d2>
 8002bbe:	2340      	movs	r3, #64	; 0x40
 8002bc0:	616b      	str	r3, [r5, #20]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bcc:	2330      	movs	r3, #48	; 0x30
 8002bce:	f04f 0901 	mov.w	r9, #1
 8002bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002d7c <_svfiprintf_r+0x1ec>
 8002bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bde:	4623      	mov	r3, r4
 8002be0:	469a      	mov	sl, r3
 8002be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002be6:	b10a      	cbz	r2, 8002bec <_svfiprintf_r+0x5c>
 8002be8:	2a25      	cmp	r2, #37	; 0x25
 8002bea:	d1f9      	bne.n	8002be0 <_svfiprintf_r+0x50>
 8002bec:	ebba 0b04 	subs.w	fp, sl, r4
 8002bf0:	d00b      	beq.n	8002c0a <_svfiprintf_r+0x7a>
 8002bf2:	465b      	mov	r3, fp
 8002bf4:	4622      	mov	r2, r4
 8002bf6:	4629      	mov	r1, r5
 8002bf8:	4638      	mov	r0, r7
 8002bfa:	f7ff ff6d 	bl	8002ad8 <__ssputs_r>
 8002bfe:	3001      	adds	r0, #1
 8002c00:	f000 80aa 	beq.w	8002d58 <_svfiprintf_r+0x1c8>
 8002c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c06:	445a      	add	r2, fp
 8002c08:	9209      	str	r2, [sp, #36]	; 0x24
 8002c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80a2 	beq.w	8002d58 <_svfiprintf_r+0x1c8>
 8002c14:	2300      	movs	r3, #0
 8002c16:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c1e:	f10a 0a01 	add.w	sl, sl, #1
 8002c22:	9304      	str	r3, [sp, #16]
 8002c24:	9307      	str	r3, [sp, #28]
 8002c26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c2a:	931a      	str	r3, [sp, #104]	; 0x68
 8002c2c:	4654      	mov	r4, sl
 8002c2e:	2205      	movs	r2, #5
 8002c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c34:	4851      	ldr	r0, [pc, #324]	; (8002d7c <_svfiprintf_r+0x1ec>)
 8002c36:	f000 fa41 	bl	80030bc <memchr>
 8002c3a:	9a04      	ldr	r2, [sp, #16]
 8002c3c:	b9d8      	cbnz	r0, 8002c76 <_svfiprintf_r+0xe6>
 8002c3e:	06d0      	lsls	r0, r2, #27
 8002c40:	bf44      	itt	mi
 8002c42:	2320      	movmi	r3, #32
 8002c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c48:	0711      	lsls	r1, r2, #28
 8002c4a:	bf44      	itt	mi
 8002c4c:	232b      	movmi	r3, #43	; 0x2b
 8002c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c52:	f89a 3000 	ldrb.w	r3, [sl]
 8002c56:	2b2a      	cmp	r3, #42	; 0x2a
 8002c58:	d015      	beq.n	8002c86 <_svfiprintf_r+0xf6>
 8002c5a:	4654      	mov	r4, sl
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f04f 0c0a 	mov.w	ip, #10
 8002c62:	9a07      	ldr	r2, [sp, #28]
 8002c64:	4621      	mov	r1, r4
 8002c66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c6a:	3b30      	subs	r3, #48	; 0x30
 8002c6c:	2b09      	cmp	r3, #9
 8002c6e:	d94e      	bls.n	8002d0e <_svfiprintf_r+0x17e>
 8002c70:	b1b0      	cbz	r0, 8002ca0 <_svfiprintf_r+0x110>
 8002c72:	9207      	str	r2, [sp, #28]
 8002c74:	e014      	b.n	8002ca0 <_svfiprintf_r+0x110>
 8002c76:	eba0 0308 	sub.w	r3, r0, r8
 8002c7a:	fa09 f303 	lsl.w	r3, r9, r3
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	46a2      	mov	sl, r4
 8002c82:	9304      	str	r3, [sp, #16]
 8002c84:	e7d2      	b.n	8002c2c <_svfiprintf_r+0x9c>
 8002c86:	9b03      	ldr	r3, [sp, #12]
 8002c88:	1d19      	adds	r1, r3, #4
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	9103      	str	r1, [sp, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	bfbb      	ittet	lt
 8002c92:	425b      	neglt	r3, r3
 8002c94:	f042 0202 	orrlt.w	r2, r2, #2
 8002c98:	9307      	strge	r3, [sp, #28]
 8002c9a:	9307      	strlt	r3, [sp, #28]
 8002c9c:	bfb8      	it	lt
 8002c9e:	9204      	strlt	r2, [sp, #16]
 8002ca0:	7823      	ldrb	r3, [r4, #0]
 8002ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8002ca4:	d10c      	bne.n	8002cc0 <_svfiprintf_r+0x130>
 8002ca6:	7863      	ldrb	r3, [r4, #1]
 8002ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8002caa:	d135      	bne.n	8002d18 <_svfiprintf_r+0x188>
 8002cac:	9b03      	ldr	r3, [sp, #12]
 8002cae:	3402      	adds	r4, #2
 8002cb0:	1d1a      	adds	r2, r3, #4
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	9203      	str	r2, [sp, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bfb8      	it	lt
 8002cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8002cbe:	9305      	str	r3, [sp, #20]
 8002cc0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002d80 <_svfiprintf_r+0x1f0>
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	4650      	mov	r0, sl
 8002cc8:	7821      	ldrb	r1, [r4, #0]
 8002cca:	f000 f9f7 	bl	80030bc <memchr>
 8002cce:	b140      	cbz	r0, 8002ce2 <_svfiprintf_r+0x152>
 8002cd0:	2340      	movs	r3, #64	; 0x40
 8002cd2:	eba0 000a 	sub.w	r0, r0, sl
 8002cd6:	fa03 f000 	lsl.w	r0, r3, r0
 8002cda:	9b04      	ldr	r3, [sp, #16]
 8002cdc:	3401      	adds	r4, #1
 8002cde:	4303      	orrs	r3, r0
 8002ce0:	9304      	str	r3, [sp, #16]
 8002ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ce6:	2206      	movs	r2, #6
 8002ce8:	4826      	ldr	r0, [pc, #152]	; (8002d84 <_svfiprintf_r+0x1f4>)
 8002cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cee:	f000 f9e5 	bl	80030bc <memchr>
 8002cf2:	2800      	cmp	r0, #0
 8002cf4:	d038      	beq.n	8002d68 <_svfiprintf_r+0x1d8>
 8002cf6:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <_svfiprintf_r+0x1f8>)
 8002cf8:	bb1b      	cbnz	r3, 8002d42 <_svfiprintf_r+0x1b2>
 8002cfa:	9b03      	ldr	r3, [sp, #12]
 8002cfc:	3307      	adds	r3, #7
 8002cfe:	f023 0307 	bic.w	r3, r3, #7
 8002d02:	3308      	adds	r3, #8
 8002d04:	9303      	str	r3, [sp, #12]
 8002d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d08:	4433      	add	r3, r6
 8002d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d0c:	e767      	b.n	8002bde <_svfiprintf_r+0x4e>
 8002d0e:	460c      	mov	r4, r1
 8002d10:	2001      	movs	r0, #1
 8002d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d16:	e7a5      	b.n	8002c64 <_svfiprintf_r+0xd4>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f04f 0c0a 	mov.w	ip, #10
 8002d1e:	4619      	mov	r1, r3
 8002d20:	3401      	adds	r4, #1
 8002d22:	9305      	str	r3, [sp, #20]
 8002d24:	4620      	mov	r0, r4
 8002d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d2a:	3a30      	subs	r2, #48	; 0x30
 8002d2c:	2a09      	cmp	r2, #9
 8002d2e:	d903      	bls.n	8002d38 <_svfiprintf_r+0x1a8>
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0c5      	beq.n	8002cc0 <_svfiprintf_r+0x130>
 8002d34:	9105      	str	r1, [sp, #20]
 8002d36:	e7c3      	b.n	8002cc0 <_svfiprintf_r+0x130>
 8002d38:	4604      	mov	r4, r0
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d40:	e7f0      	b.n	8002d24 <_svfiprintf_r+0x194>
 8002d42:	ab03      	add	r3, sp, #12
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	462a      	mov	r2, r5
 8002d48:	4638      	mov	r0, r7
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <_svfiprintf_r+0x1fc>)
 8002d4c:	a904      	add	r1, sp, #16
 8002d4e:	f3af 8000 	nop.w
 8002d52:	1c42      	adds	r2, r0, #1
 8002d54:	4606      	mov	r6, r0
 8002d56:	d1d6      	bne.n	8002d06 <_svfiprintf_r+0x176>
 8002d58:	89ab      	ldrh	r3, [r5, #12]
 8002d5a:	065b      	lsls	r3, r3, #25
 8002d5c:	f53f af2c 	bmi.w	8002bb8 <_svfiprintf_r+0x28>
 8002d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d62:	b01d      	add	sp, #116	; 0x74
 8002d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d68:	ab03      	add	r3, sp, #12
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	462a      	mov	r2, r5
 8002d6e:	4638      	mov	r0, r7
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <_svfiprintf_r+0x1fc>)
 8002d72:	a904      	add	r1, sp, #16
 8002d74:	f000 f87c 	bl	8002e70 <_printf_i>
 8002d78:	e7eb      	b.n	8002d52 <_svfiprintf_r+0x1c2>
 8002d7a:	bf00      	nop
 8002d7c:	080033f6 	.word	0x080033f6
 8002d80:	080033fc 	.word	0x080033fc
 8002d84:	08003400 	.word	0x08003400
 8002d88:	00000000 	.word	0x00000000
 8002d8c:	08002ad9 	.word	0x08002ad9

08002d90 <_printf_common>:
 8002d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d94:	4616      	mov	r6, r2
 8002d96:	4699      	mov	r9, r3
 8002d98:	688a      	ldr	r2, [r1, #8]
 8002d9a:	690b      	ldr	r3, [r1, #16]
 8002d9c:	4607      	mov	r7, r0
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	bfb8      	it	lt
 8002da2:	4613      	movlt	r3, r2
 8002da4:	6033      	str	r3, [r6, #0]
 8002da6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002daa:	460c      	mov	r4, r1
 8002dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002db0:	b10a      	cbz	r2, 8002db6 <_printf_common+0x26>
 8002db2:	3301      	adds	r3, #1
 8002db4:	6033      	str	r3, [r6, #0]
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	0699      	lsls	r1, r3, #26
 8002dba:	bf42      	ittt	mi
 8002dbc:	6833      	ldrmi	r3, [r6, #0]
 8002dbe:	3302      	addmi	r3, #2
 8002dc0:	6033      	strmi	r3, [r6, #0]
 8002dc2:	6825      	ldr	r5, [r4, #0]
 8002dc4:	f015 0506 	ands.w	r5, r5, #6
 8002dc8:	d106      	bne.n	8002dd8 <_printf_common+0x48>
 8002dca:	f104 0a19 	add.w	sl, r4, #25
 8002dce:	68e3      	ldr	r3, [r4, #12]
 8002dd0:	6832      	ldr	r2, [r6, #0]
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	42ab      	cmp	r3, r5
 8002dd6:	dc28      	bgt.n	8002e2a <_printf_common+0x9a>
 8002dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ddc:	1e13      	subs	r3, r2, #0
 8002dde:	6822      	ldr	r2, [r4, #0]
 8002de0:	bf18      	it	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	0692      	lsls	r2, r2, #26
 8002de6:	d42d      	bmi.n	8002e44 <_printf_common+0xb4>
 8002de8:	4649      	mov	r1, r9
 8002dea:	4638      	mov	r0, r7
 8002dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002df0:	47c0      	blx	r8
 8002df2:	3001      	adds	r0, #1
 8002df4:	d020      	beq.n	8002e38 <_printf_common+0xa8>
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	68e5      	ldr	r5, [r4, #12]
 8002dfa:	f003 0306 	and.w	r3, r3, #6
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	bf18      	it	ne
 8002e02:	2500      	movne	r5, #0
 8002e04:	6832      	ldr	r2, [r6, #0]
 8002e06:	f04f 0600 	mov.w	r6, #0
 8002e0a:	68a3      	ldr	r3, [r4, #8]
 8002e0c:	bf08      	it	eq
 8002e0e:	1aad      	subeq	r5, r5, r2
 8002e10:	6922      	ldr	r2, [r4, #16]
 8002e12:	bf08      	it	eq
 8002e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	bfc4      	itt	gt
 8002e1c:	1a9b      	subgt	r3, r3, r2
 8002e1e:	18ed      	addgt	r5, r5, r3
 8002e20:	341a      	adds	r4, #26
 8002e22:	42b5      	cmp	r5, r6
 8002e24:	d11a      	bne.n	8002e5c <_printf_common+0xcc>
 8002e26:	2000      	movs	r0, #0
 8002e28:	e008      	b.n	8002e3c <_printf_common+0xac>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	4652      	mov	r2, sl
 8002e2e:	4649      	mov	r1, r9
 8002e30:	4638      	mov	r0, r7
 8002e32:	47c0      	blx	r8
 8002e34:	3001      	adds	r0, #1
 8002e36:	d103      	bne.n	8002e40 <_printf_common+0xb0>
 8002e38:	f04f 30ff 	mov.w	r0, #4294967295
 8002e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e40:	3501      	adds	r5, #1
 8002e42:	e7c4      	b.n	8002dce <_printf_common+0x3e>
 8002e44:	2030      	movs	r0, #48	; 0x30
 8002e46:	18e1      	adds	r1, r4, r3
 8002e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e52:	4422      	add	r2, r4
 8002e54:	3302      	adds	r3, #2
 8002e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e5a:	e7c5      	b.n	8002de8 <_printf_common+0x58>
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	4622      	mov	r2, r4
 8002e60:	4649      	mov	r1, r9
 8002e62:	4638      	mov	r0, r7
 8002e64:	47c0      	blx	r8
 8002e66:	3001      	adds	r0, #1
 8002e68:	d0e6      	beq.n	8002e38 <_printf_common+0xa8>
 8002e6a:	3601      	adds	r6, #1
 8002e6c:	e7d9      	b.n	8002e22 <_printf_common+0x92>
	...

08002e70 <_printf_i>:
 8002e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e74:	7e0f      	ldrb	r7, [r1, #24]
 8002e76:	4691      	mov	r9, r2
 8002e78:	2f78      	cmp	r7, #120	; 0x78
 8002e7a:	4680      	mov	r8, r0
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	469a      	mov	sl, r3
 8002e80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e86:	d807      	bhi.n	8002e98 <_printf_i+0x28>
 8002e88:	2f62      	cmp	r7, #98	; 0x62
 8002e8a:	d80a      	bhi.n	8002ea2 <_printf_i+0x32>
 8002e8c:	2f00      	cmp	r7, #0
 8002e8e:	f000 80d9 	beq.w	8003044 <_printf_i+0x1d4>
 8002e92:	2f58      	cmp	r7, #88	; 0x58
 8002e94:	f000 80a4 	beq.w	8002fe0 <_printf_i+0x170>
 8002e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ea0:	e03a      	b.n	8002f18 <_printf_i+0xa8>
 8002ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ea6:	2b15      	cmp	r3, #21
 8002ea8:	d8f6      	bhi.n	8002e98 <_printf_i+0x28>
 8002eaa:	a101      	add	r1, pc, #4	; (adr r1, 8002eb0 <_printf_i+0x40>)
 8002eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002eb0:	08002f09 	.word	0x08002f09
 8002eb4:	08002f1d 	.word	0x08002f1d
 8002eb8:	08002e99 	.word	0x08002e99
 8002ebc:	08002e99 	.word	0x08002e99
 8002ec0:	08002e99 	.word	0x08002e99
 8002ec4:	08002e99 	.word	0x08002e99
 8002ec8:	08002f1d 	.word	0x08002f1d
 8002ecc:	08002e99 	.word	0x08002e99
 8002ed0:	08002e99 	.word	0x08002e99
 8002ed4:	08002e99 	.word	0x08002e99
 8002ed8:	08002e99 	.word	0x08002e99
 8002edc:	0800302b 	.word	0x0800302b
 8002ee0:	08002f4d 	.word	0x08002f4d
 8002ee4:	0800300d 	.word	0x0800300d
 8002ee8:	08002e99 	.word	0x08002e99
 8002eec:	08002e99 	.word	0x08002e99
 8002ef0:	0800304d 	.word	0x0800304d
 8002ef4:	08002e99 	.word	0x08002e99
 8002ef8:	08002f4d 	.word	0x08002f4d
 8002efc:	08002e99 	.word	0x08002e99
 8002f00:	08002e99 	.word	0x08002e99
 8002f04:	08003015 	.word	0x08003015
 8002f08:	682b      	ldr	r3, [r5, #0]
 8002f0a:	1d1a      	adds	r2, r3, #4
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	602a      	str	r2, [r5, #0]
 8002f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0a4      	b.n	8003066 <_printf_i+0x1f6>
 8002f1c:	6820      	ldr	r0, [r4, #0]
 8002f1e:	6829      	ldr	r1, [r5, #0]
 8002f20:	0606      	lsls	r6, r0, #24
 8002f22:	f101 0304 	add.w	r3, r1, #4
 8002f26:	d50a      	bpl.n	8002f3e <_printf_i+0xce>
 8002f28:	680e      	ldr	r6, [r1, #0]
 8002f2a:	602b      	str	r3, [r5, #0]
 8002f2c:	2e00      	cmp	r6, #0
 8002f2e:	da03      	bge.n	8002f38 <_printf_i+0xc8>
 8002f30:	232d      	movs	r3, #45	; 0x2d
 8002f32:	4276      	negs	r6, r6
 8002f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f38:	230a      	movs	r3, #10
 8002f3a:	485e      	ldr	r0, [pc, #376]	; (80030b4 <_printf_i+0x244>)
 8002f3c:	e019      	b.n	8002f72 <_printf_i+0x102>
 8002f3e:	680e      	ldr	r6, [r1, #0]
 8002f40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f44:	602b      	str	r3, [r5, #0]
 8002f46:	bf18      	it	ne
 8002f48:	b236      	sxthne	r6, r6
 8002f4a:	e7ef      	b.n	8002f2c <_printf_i+0xbc>
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	6820      	ldr	r0, [r4, #0]
 8002f50:	1d19      	adds	r1, r3, #4
 8002f52:	6029      	str	r1, [r5, #0]
 8002f54:	0601      	lsls	r1, r0, #24
 8002f56:	d501      	bpl.n	8002f5c <_printf_i+0xec>
 8002f58:	681e      	ldr	r6, [r3, #0]
 8002f5a:	e002      	b.n	8002f62 <_printf_i+0xf2>
 8002f5c:	0646      	lsls	r6, r0, #25
 8002f5e:	d5fb      	bpl.n	8002f58 <_printf_i+0xe8>
 8002f60:	881e      	ldrh	r6, [r3, #0]
 8002f62:	2f6f      	cmp	r7, #111	; 0x6f
 8002f64:	bf0c      	ite	eq
 8002f66:	2308      	moveq	r3, #8
 8002f68:	230a      	movne	r3, #10
 8002f6a:	4852      	ldr	r0, [pc, #328]	; (80030b4 <_printf_i+0x244>)
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f72:	6865      	ldr	r5, [r4, #4]
 8002f74:	2d00      	cmp	r5, #0
 8002f76:	bfa8      	it	ge
 8002f78:	6821      	ldrge	r1, [r4, #0]
 8002f7a:	60a5      	str	r5, [r4, #8]
 8002f7c:	bfa4      	itt	ge
 8002f7e:	f021 0104 	bicge.w	r1, r1, #4
 8002f82:	6021      	strge	r1, [r4, #0]
 8002f84:	b90e      	cbnz	r6, 8002f8a <_printf_i+0x11a>
 8002f86:	2d00      	cmp	r5, #0
 8002f88:	d04d      	beq.n	8003026 <_printf_i+0x1b6>
 8002f8a:	4615      	mov	r5, r2
 8002f8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f90:	fb03 6711 	mls	r7, r3, r1, r6
 8002f94:	5dc7      	ldrb	r7, [r0, r7]
 8002f96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002f9a:	4637      	mov	r7, r6
 8002f9c:	42bb      	cmp	r3, r7
 8002f9e:	460e      	mov	r6, r1
 8002fa0:	d9f4      	bls.n	8002f8c <_printf_i+0x11c>
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d10b      	bne.n	8002fbe <_printf_i+0x14e>
 8002fa6:	6823      	ldr	r3, [r4, #0]
 8002fa8:	07de      	lsls	r6, r3, #31
 8002faa:	d508      	bpl.n	8002fbe <_printf_i+0x14e>
 8002fac:	6923      	ldr	r3, [r4, #16]
 8002fae:	6861      	ldr	r1, [r4, #4]
 8002fb0:	4299      	cmp	r1, r3
 8002fb2:	bfde      	ittt	le
 8002fb4:	2330      	movle	r3, #48	; 0x30
 8002fb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002fbe:	1b52      	subs	r2, r2, r5
 8002fc0:	6122      	str	r2, [r4, #16]
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	4640      	mov	r0, r8
 8002fc8:	f8cd a000 	str.w	sl, [sp]
 8002fcc:	aa03      	add	r2, sp, #12
 8002fce:	f7ff fedf 	bl	8002d90 <_printf_common>
 8002fd2:	3001      	adds	r0, #1
 8002fd4:	d14c      	bne.n	8003070 <_printf_i+0x200>
 8002fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002fda:	b004      	add	sp, #16
 8002fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe0:	4834      	ldr	r0, [pc, #208]	; (80030b4 <_printf_i+0x244>)
 8002fe2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002fe6:	6829      	ldr	r1, [r5, #0]
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	f851 6b04 	ldr.w	r6, [r1], #4
 8002fee:	6029      	str	r1, [r5, #0]
 8002ff0:	061d      	lsls	r5, r3, #24
 8002ff2:	d514      	bpl.n	800301e <_printf_i+0x1ae>
 8002ff4:	07df      	lsls	r7, r3, #31
 8002ff6:	bf44      	itt	mi
 8002ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8002ffc:	6023      	strmi	r3, [r4, #0]
 8002ffe:	b91e      	cbnz	r6, 8003008 <_printf_i+0x198>
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	f023 0320 	bic.w	r3, r3, #32
 8003006:	6023      	str	r3, [r4, #0]
 8003008:	2310      	movs	r3, #16
 800300a:	e7af      	b.n	8002f6c <_printf_i+0xfc>
 800300c:	6823      	ldr	r3, [r4, #0]
 800300e:	f043 0320 	orr.w	r3, r3, #32
 8003012:	6023      	str	r3, [r4, #0]
 8003014:	2378      	movs	r3, #120	; 0x78
 8003016:	4828      	ldr	r0, [pc, #160]	; (80030b8 <_printf_i+0x248>)
 8003018:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800301c:	e7e3      	b.n	8002fe6 <_printf_i+0x176>
 800301e:	0659      	lsls	r1, r3, #25
 8003020:	bf48      	it	mi
 8003022:	b2b6      	uxthmi	r6, r6
 8003024:	e7e6      	b.n	8002ff4 <_printf_i+0x184>
 8003026:	4615      	mov	r5, r2
 8003028:	e7bb      	b.n	8002fa2 <_printf_i+0x132>
 800302a:	682b      	ldr	r3, [r5, #0]
 800302c:	6826      	ldr	r6, [r4, #0]
 800302e:	1d18      	adds	r0, r3, #4
 8003030:	6961      	ldr	r1, [r4, #20]
 8003032:	6028      	str	r0, [r5, #0]
 8003034:	0635      	lsls	r5, r6, #24
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	d501      	bpl.n	800303e <_printf_i+0x1ce>
 800303a:	6019      	str	r1, [r3, #0]
 800303c:	e002      	b.n	8003044 <_printf_i+0x1d4>
 800303e:	0670      	lsls	r0, r6, #25
 8003040:	d5fb      	bpl.n	800303a <_printf_i+0x1ca>
 8003042:	8019      	strh	r1, [r3, #0]
 8003044:	2300      	movs	r3, #0
 8003046:	4615      	mov	r5, r2
 8003048:	6123      	str	r3, [r4, #16]
 800304a:	e7ba      	b.n	8002fc2 <_printf_i+0x152>
 800304c:	682b      	ldr	r3, [r5, #0]
 800304e:	2100      	movs	r1, #0
 8003050:	1d1a      	adds	r2, r3, #4
 8003052:	602a      	str	r2, [r5, #0]
 8003054:	681d      	ldr	r5, [r3, #0]
 8003056:	6862      	ldr	r2, [r4, #4]
 8003058:	4628      	mov	r0, r5
 800305a:	f000 f82f 	bl	80030bc <memchr>
 800305e:	b108      	cbz	r0, 8003064 <_printf_i+0x1f4>
 8003060:	1b40      	subs	r0, r0, r5
 8003062:	6060      	str	r0, [r4, #4]
 8003064:	6863      	ldr	r3, [r4, #4]
 8003066:	6123      	str	r3, [r4, #16]
 8003068:	2300      	movs	r3, #0
 800306a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800306e:	e7a8      	b.n	8002fc2 <_printf_i+0x152>
 8003070:	462a      	mov	r2, r5
 8003072:	4649      	mov	r1, r9
 8003074:	4640      	mov	r0, r8
 8003076:	6923      	ldr	r3, [r4, #16]
 8003078:	47d0      	blx	sl
 800307a:	3001      	adds	r0, #1
 800307c:	d0ab      	beq.n	8002fd6 <_printf_i+0x166>
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	079b      	lsls	r3, r3, #30
 8003082:	d413      	bmi.n	80030ac <_printf_i+0x23c>
 8003084:	68e0      	ldr	r0, [r4, #12]
 8003086:	9b03      	ldr	r3, [sp, #12]
 8003088:	4298      	cmp	r0, r3
 800308a:	bfb8      	it	lt
 800308c:	4618      	movlt	r0, r3
 800308e:	e7a4      	b.n	8002fda <_printf_i+0x16a>
 8003090:	2301      	movs	r3, #1
 8003092:	4632      	mov	r2, r6
 8003094:	4649      	mov	r1, r9
 8003096:	4640      	mov	r0, r8
 8003098:	47d0      	blx	sl
 800309a:	3001      	adds	r0, #1
 800309c:	d09b      	beq.n	8002fd6 <_printf_i+0x166>
 800309e:	3501      	adds	r5, #1
 80030a0:	68e3      	ldr	r3, [r4, #12]
 80030a2:	9903      	ldr	r1, [sp, #12]
 80030a4:	1a5b      	subs	r3, r3, r1
 80030a6:	42ab      	cmp	r3, r5
 80030a8:	dcf2      	bgt.n	8003090 <_printf_i+0x220>
 80030aa:	e7eb      	b.n	8003084 <_printf_i+0x214>
 80030ac:	2500      	movs	r5, #0
 80030ae:	f104 0619 	add.w	r6, r4, #25
 80030b2:	e7f5      	b.n	80030a0 <_printf_i+0x230>
 80030b4:	08003407 	.word	0x08003407
 80030b8:	08003418 	.word	0x08003418

080030bc <memchr>:
 80030bc:	4603      	mov	r3, r0
 80030be:	b510      	push	{r4, lr}
 80030c0:	b2c9      	uxtb	r1, r1
 80030c2:	4402      	add	r2, r0
 80030c4:	4293      	cmp	r3, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	d101      	bne.n	80030ce <memchr+0x12>
 80030ca:	2000      	movs	r0, #0
 80030cc:	e003      	b.n	80030d6 <memchr+0x1a>
 80030ce:	7804      	ldrb	r4, [r0, #0]
 80030d0:	3301      	adds	r3, #1
 80030d2:	428c      	cmp	r4, r1
 80030d4:	d1f6      	bne.n	80030c4 <memchr+0x8>
 80030d6:	bd10      	pop	{r4, pc}

080030d8 <memcpy>:
 80030d8:	440a      	add	r2, r1
 80030da:	4291      	cmp	r1, r2
 80030dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80030e0:	d100      	bne.n	80030e4 <memcpy+0xc>
 80030e2:	4770      	bx	lr
 80030e4:	b510      	push	{r4, lr}
 80030e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030ea:	4291      	cmp	r1, r2
 80030ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030f0:	d1f9      	bne.n	80030e6 <memcpy+0xe>
 80030f2:	bd10      	pop	{r4, pc}

080030f4 <memmove>:
 80030f4:	4288      	cmp	r0, r1
 80030f6:	b510      	push	{r4, lr}
 80030f8:	eb01 0402 	add.w	r4, r1, r2
 80030fc:	d902      	bls.n	8003104 <memmove+0x10>
 80030fe:	4284      	cmp	r4, r0
 8003100:	4623      	mov	r3, r4
 8003102:	d807      	bhi.n	8003114 <memmove+0x20>
 8003104:	1e43      	subs	r3, r0, #1
 8003106:	42a1      	cmp	r1, r4
 8003108:	d008      	beq.n	800311c <memmove+0x28>
 800310a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800310e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003112:	e7f8      	b.n	8003106 <memmove+0x12>
 8003114:	4601      	mov	r1, r0
 8003116:	4402      	add	r2, r0
 8003118:	428a      	cmp	r2, r1
 800311a:	d100      	bne.n	800311e <memmove+0x2a>
 800311c:	bd10      	pop	{r4, pc}
 800311e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003122:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003126:	e7f7      	b.n	8003118 <memmove+0x24>

08003128 <_free_r>:
 8003128:	b538      	push	{r3, r4, r5, lr}
 800312a:	4605      	mov	r5, r0
 800312c:	2900      	cmp	r1, #0
 800312e:	d040      	beq.n	80031b2 <_free_r+0x8a>
 8003130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003134:	1f0c      	subs	r4, r1, #4
 8003136:	2b00      	cmp	r3, #0
 8003138:	bfb8      	it	lt
 800313a:	18e4      	addlt	r4, r4, r3
 800313c:	f000 f910 	bl	8003360 <__malloc_lock>
 8003140:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <_free_r+0x8c>)
 8003142:	6813      	ldr	r3, [r2, #0]
 8003144:	b933      	cbnz	r3, 8003154 <_free_r+0x2c>
 8003146:	6063      	str	r3, [r4, #4]
 8003148:	6014      	str	r4, [r2, #0]
 800314a:	4628      	mov	r0, r5
 800314c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003150:	f000 b90c 	b.w	800336c <__malloc_unlock>
 8003154:	42a3      	cmp	r3, r4
 8003156:	d908      	bls.n	800316a <_free_r+0x42>
 8003158:	6820      	ldr	r0, [r4, #0]
 800315a:	1821      	adds	r1, r4, r0
 800315c:	428b      	cmp	r3, r1
 800315e:	bf01      	itttt	eq
 8003160:	6819      	ldreq	r1, [r3, #0]
 8003162:	685b      	ldreq	r3, [r3, #4]
 8003164:	1809      	addeq	r1, r1, r0
 8003166:	6021      	streq	r1, [r4, #0]
 8003168:	e7ed      	b.n	8003146 <_free_r+0x1e>
 800316a:	461a      	mov	r2, r3
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	b10b      	cbz	r3, 8003174 <_free_r+0x4c>
 8003170:	42a3      	cmp	r3, r4
 8003172:	d9fa      	bls.n	800316a <_free_r+0x42>
 8003174:	6811      	ldr	r1, [r2, #0]
 8003176:	1850      	adds	r0, r2, r1
 8003178:	42a0      	cmp	r0, r4
 800317a:	d10b      	bne.n	8003194 <_free_r+0x6c>
 800317c:	6820      	ldr	r0, [r4, #0]
 800317e:	4401      	add	r1, r0
 8003180:	1850      	adds	r0, r2, r1
 8003182:	4283      	cmp	r3, r0
 8003184:	6011      	str	r1, [r2, #0]
 8003186:	d1e0      	bne.n	800314a <_free_r+0x22>
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	4401      	add	r1, r0
 800318e:	6011      	str	r1, [r2, #0]
 8003190:	6053      	str	r3, [r2, #4]
 8003192:	e7da      	b.n	800314a <_free_r+0x22>
 8003194:	d902      	bls.n	800319c <_free_r+0x74>
 8003196:	230c      	movs	r3, #12
 8003198:	602b      	str	r3, [r5, #0]
 800319a:	e7d6      	b.n	800314a <_free_r+0x22>
 800319c:	6820      	ldr	r0, [r4, #0]
 800319e:	1821      	adds	r1, r4, r0
 80031a0:	428b      	cmp	r3, r1
 80031a2:	bf01      	itttt	eq
 80031a4:	6819      	ldreq	r1, [r3, #0]
 80031a6:	685b      	ldreq	r3, [r3, #4]
 80031a8:	1809      	addeq	r1, r1, r0
 80031aa:	6021      	streq	r1, [r4, #0]
 80031ac:	6063      	str	r3, [r4, #4]
 80031ae:	6054      	str	r4, [r2, #4]
 80031b0:	e7cb      	b.n	800314a <_free_r+0x22>
 80031b2:	bd38      	pop	{r3, r4, r5, pc}
 80031b4:	2000010c 	.word	0x2000010c

080031b8 <sbrk_aligned>:
 80031b8:	b570      	push	{r4, r5, r6, lr}
 80031ba:	4e0e      	ldr	r6, [pc, #56]	; (80031f4 <sbrk_aligned+0x3c>)
 80031bc:	460c      	mov	r4, r1
 80031be:	6831      	ldr	r1, [r6, #0]
 80031c0:	4605      	mov	r5, r0
 80031c2:	b911      	cbnz	r1, 80031ca <sbrk_aligned+0x12>
 80031c4:	f000 f8bc 	bl	8003340 <_sbrk_r>
 80031c8:	6030      	str	r0, [r6, #0]
 80031ca:	4621      	mov	r1, r4
 80031cc:	4628      	mov	r0, r5
 80031ce:	f000 f8b7 	bl	8003340 <_sbrk_r>
 80031d2:	1c43      	adds	r3, r0, #1
 80031d4:	d00a      	beq.n	80031ec <sbrk_aligned+0x34>
 80031d6:	1cc4      	adds	r4, r0, #3
 80031d8:	f024 0403 	bic.w	r4, r4, #3
 80031dc:	42a0      	cmp	r0, r4
 80031de:	d007      	beq.n	80031f0 <sbrk_aligned+0x38>
 80031e0:	1a21      	subs	r1, r4, r0
 80031e2:	4628      	mov	r0, r5
 80031e4:	f000 f8ac 	bl	8003340 <_sbrk_r>
 80031e8:	3001      	adds	r0, #1
 80031ea:	d101      	bne.n	80031f0 <sbrk_aligned+0x38>
 80031ec:	f04f 34ff 	mov.w	r4, #4294967295
 80031f0:	4620      	mov	r0, r4
 80031f2:	bd70      	pop	{r4, r5, r6, pc}
 80031f4:	20000110 	.word	0x20000110

080031f8 <_malloc_r>:
 80031f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031fc:	1ccd      	adds	r5, r1, #3
 80031fe:	f025 0503 	bic.w	r5, r5, #3
 8003202:	3508      	adds	r5, #8
 8003204:	2d0c      	cmp	r5, #12
 8003206:	bf38      	it	cc
 8003208:	250c      	movcc	r5, #12
 800320a:	2d00      	cmp	r5, #0
 800320c:	4607      	mov	r7, r0
 800320e:	db01      	blt.n	8003214 <_malloc_r+0x1c>
 8003210:	42a9      	cmp	r1, r5
 8003212:	d905      	bls.n	8003220 <_malloc_r+0x28>
 8003214:	230c      	movs	r3, #12
 8003216:	2600      	movs	r6, #0
 8003218:	603b      	str	r3, [r7, #0]
 800321a:	4630      	mov	r0, r6
 800321c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003220:	4e2e      	ldr	r6, [pc, #184]	; (80032dc <_malloc_r+0xe4>)
 8003222:	f000 f89d 	bl	8003360 <__malloc_lock>
 8003226:	6833      	ldr	r3, [r6, #0]
 8003228:	461c      	mov	r4, r3
 800322a:	bb34      	cbnz	r4, 800327a <_malloc_r+0x82>
 800322c:	4629      	mov	r1, r5
 800322e:	4638      	mov	r0, r7
 8003230:	f7ff ffc2 	bl	80031b8 <sbrk_aligned>
 8003234:	1c43      	adds	r3, r0, #1
 8003236:	4604      	mov	r4, r0
 8003238:	d14d      	bne.n	80032d6 <_malloc_r+0xde>
 800323a:	6834      	ldr	r4, [r6, #0]
 800323c:	4626      	mov	r6, r4
 800323e:	2e00      	cmp	r6, #0
 8003240:	d140      	bne.n	80032c4 <_malloc_r+0xcc>
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	4631      	mov	r1, r6
 8003246:	4638      	mov	r0, r7
 8003248:	eb04 0803 	add.w	r8, r4, r3
 800324c:	f000 f878 	bl	8003340 <_sbrk_r>
 8003250:	4580      	cmp	r8, r0
 8003252:	d13a      	bne.n	80032ca <_malloc_r+0xd2>
 8003254:	6821      	ldr	r1, [r4, #0]
 8003256:	3503      	adds	r5, #3
 8003258:	1a6d      	subs	r5, r5, r1
 800325a:	f025 0503 	bic.w	r5, r5, #3
 800325e:	3508      	adds	r5, #8
 8003260:	2d0c      	cmp	r5, #12
 8003262:	bf38      	it	cc
 8003264:	250c      	movcc	r5, #12
 8003266:	4638      	mov	r0, r7
 8003268:	4629      	mov	r1, r5
 800326a:	f7ff ffa5 	bl	80031b8 <sbrk_aligned>
 800326e:	3001      	adds	r0, #1
 8003270:	d02b      	beq.n	80032ca <_malloc_r+0xd2>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	442b      	add	r3, r5
 8003276:	6023      	str	r3, [r4, #0]
 8003278:	e00e      	b.n	8003298 <_malloc_r+0xa0>
 800327a:	6822      	ldr	r2, [r4, #0]
 800327c:	1b52      	subs	r2, r2, r5
 800327e:	d41e      	bmi.n	80032be <_malloc_r+0xc6>
 8003280:	2a0b      	cmp	r2, #11
 8003282:	d916      	bls.n	80032b2 <_malloc_r+0xba>
 8003284:	1961      	adds	r1, r4, r5
 8003286:	42a3      	cmp	r3, r4
 8003288:	6025      	str	r5, [r4, #0]
 800328a:	bf18      	it	ne
 800328c:	6059      	strne	r1, [r3, #4]
 800328e:	6863      	ldr	r3, [r4, #4]
 8003290:	bf08      	it	eq
 8003292:	6031      	streq	r1, [r6, #0]
 8003294:	5162      	str	r2, [r4, r5]
 8003296:	604b      	str	r3, [r1, #4]
 8003298:	4638      	mov	r0, r7
 800329a:	f104 060b 	add.w	r6, r4, #11
 800329e:	f000 f865 	bl	800336c <__malloc_unlock>
 80032a2:	f026 0607 	bic.w	r6, r6, #7
 80032a6:	1d23      	adds	r3, r4, #4
 80032a8:	1af2      	subs	r2, r6, r3
 80032aa:	d0b6      	beq.n	800321a <_malloc_r+0x22>
 80032ac:	1b9b      	subs	r3, r3, r6
 80032ae:	50a3      	str	r3, [r4, r2]
 80032b0:	e7b3      	b.n	800321a <_malloc_r+0x22>
 80032b2:	6862      	ldr	r2, [r4, #4]
 80032b4:	42a3      	cmp	r3, r4
 80032b6:	bf0c      	ite	eq
 80032b8:	6032      	streq	r2, [r6, #0]
 80032ba:	605a      	strne	r2, [r3, #4]
 80032bc:	e7ec      	b.n	8003298 <_malloc_r+0xa0>
 80032be:	4623      	mov	r3, r4
 80032c0:	6864      	ldr	r4, [r4, #4]
 80032c2:	e7b2      	b.n	800322a <_malloc_r+0x32>
 80032c4:	4634      	mov	r4, r6
 80032c6:	6876      	ldr	r6, [r6, #4]
 80032c8:	e7b9      	b.n	800323e <_malloc_r+0x46>
 80032ca:	230c      	movs	r3, #12
 80032cc:	4638      	mov	r0, r7
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	f000 f84c 	bl	800336c <__malloc_unlock>
 80032d4:	e7a1      	b.n	800321a <_malloc_r+0x22>
 80032d6:	6025      	str	r5, [r4, #0]
 80032d8:	e7de      	b.n	8003298 <_malloc_r+0xa0>
 80032da:	bf00      	nop
 80032dc:	2000010c 	.word	0x2000010c

080032e0 <_realloc_r>:
 80032e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e4:	4680      	mov	r8, r0
 80032e6:	4614      	mov	r4, r2
 80032e8:	460e      	mov	r6, r1
 80032ea:	b921      	cbnz	r1, 80032f6 <_realloc_r+0x16>
 80032ec:	4611      	mov	r1, r2
 80032ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032f2:	f7ff bf81 	b.w	80031f8 <_malloc_r>
 80032f6:	b92a      	cbnz	r2, 8003304 <_realloc_r+0x24>
 80032f8:	f7ff ff16 	bl	8003128 <_free_r>
 80032fc:	4625      	mov	r5, r4
 80032fe:	4628      	mov	r0, r5
 8003300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003304:	f000 f838 	bl	8003378 <_malloc_usable_size_r>
 8003308:	4284      	cmp	r4, r0
 800330a:	4607      	mov	r7, r0
 800330c:	d802      	bhi.n	8003314 <_realloc_r+0x34>
 800330e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003312:	d812      	bhi.n	800333a <_realloc_r+0x5a>
 8003314:	4621      	mov	r1, r4
 8003316:	4640      	mov	r0, r8
 8003318:	f7ff ff6e 	bl	80031f8 <_malloc_r>
 800331c:	4605      	mov	r5, r0
 800331e:	2800      	cmp	r0, #0
 8003320:	d0ed      	beq.n	80032fe <_realloc_r+0x1e>
 8003322:	42bc      	cmp	r4, r7
 8003324:	4622      	mov	r2, r4
 8003326:	4631      	mov	r1, r6
 8003328:	bf28      	it	cs
 800332a:	463a      	movcs	r2, r7
 800332c:	f7ff fed4 	bl	80030d8 <memcpy>
 8003330:	4631      	mov	r1, r6
 8003332:	4640      	mov	r0, r8
 8003334:	f7ff fef8 	bl	8003128 <_free_r>
 8003338:	e7e1      	b.n	80032fe <_realloc_r+0x1e>
 800333a:	4635      	mov	r5, r6
 800333c:	e7df      	b.n	80032fe <_realloc_r+0x1e>
	...

08003340 <_sbrk_r>:
 8003340:	b538      	push	{r3, r4, r5, lr}
 8003342:	2300      	movs	r3, #0
 8003344:	4d05      	ldr	r5, [pc, #20]	; (800335c <_sbrk_r+0x1c>)
 8003346:	4604      	mov	r4, r0
 8003348:	4608      	mov	r0, r1
 800334a:	602b      	str	r3, [r5, #0]
 800334c:	f7fd fc9a 	bl	8000c84 <_sbrk>
 8003350:	1c43      	adds	r3, r0, #1
 8003352:	d102      	bne.n	800335a <_sbrk_r+0x1a>
 8003354:	682b      	ldr	r3, [r5, #0]
 8003356:	b103      	cbz	r3, 800335a <_sbrk_r+0x1a>
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	bd38      	pop	{r3, r4, r5, pc}
 800335c:	20000114 	.word	0x20000114

08003360 <__malloc_lock>:
 8003360:	4801      	ldr	r0, [pc, #4]	; (8003368 <__malloc_lock+0x8>)
 8003362:	f000 b811 	b.w	8003388 <__retarget_lock_acquire_recursive>
 8003366:	bf00      	nop
 8003368:	20000118 	.word	0x20000118

0800336c <__malloc_unlock>:
 800336c:	4801      	ldr	r0, [pc, #4]	; (8003374 <__malloc_unlock+0x8>)
 800336e:	f000 b80c 	b.w	800338a <__retarget_lock_release_recursive>
 8003372:	bf00      	nop
 8003374:	20000118 	.word	0x20000118

08003378 <_malloc_usable_size_r>:
 8003378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800337c:	1f18      	subs	r0, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	bfbc      	itt	lt
 8003382:	580b      	ldrlt	r3, [r1, r0]
 8003384:	18c0      	addlt	r0, r0, r3
 8003386:	4770      	bx	lr

08003388 <__retarget_lock_acquire_recursive>:
 8003388:	4770      	bx	lr

0800338a <__retarget_lock_release_recursive>:
 800338a:	4770      	bx	lr

0800338c <_init>:
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800338e:	bf00      	nop
 8003390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003392:	bc08      	pop	{r3}
 8003394:	469e      	mov	lr, r3
 8003396:	4770      	bx	lr

08003398 <_fini>:
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339a:	bf00      	nop
 800339c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800339e:	bc08      	pop	{r3}
 80033a0:	469e      	mov	lr, r3
 80033a2:	4770      	bx	lr
